<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\stm32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\stm32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Aug 26 09:08:52 2023
<BR><P>
<H3>Maximum Stack Usage =       2048 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Cloud_Task &rArr; Ali_AlsDataAck &rArr; Mqtt_Cloud_Publish &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2a]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[d2]">cJSON_Delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d2]">cJSON_Delete</a><BR>
 <LI><a href="#[3ee]">parse_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21d]">parse_value</a><BR>
 <LI><a href="#[3e9]">parse_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21d]">parse_value</a><BR>
 <LI><a href="#[172]">_lv_area_is_point_on</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[172]">_lv_area_is_point_on</a><BR>
 <LI><a href="#[394]">refresh_children_position</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[394]">refresh_children_position</a><BR>
 <LI><a href="#[1c5]">_lv_obj_get_style_ptr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c1]">update_style_cache</a><BR>
 <LI><a href="#[38c]">lv_obj_get_style_value_blend_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[38b]">lv_obj_get_style_transform_zoom</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[357]">lv_obj_get_style_transform_width</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[358]">lv_obj_get_style_transform_height</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[38a]">lv_obj_get_style_transform_angle</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[389]">lv_obj_get_style_text_line_space</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[388]">lv_obj_get_style_text_letter_space</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[386]">lv_obj_get_style_text_decor</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[385]">lv_obj_get_style_text_blend_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[35e]">lv_obj_get_style_shadow_width</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[384]">lv_obj_get_style_shadow_blend_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[356]">lv_obj_get_style_radius</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[381]">lv_obj_get_style_pattern_blend_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[380]">lv_obj_get_style_pad_top</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[37f]">lv_obj_get_style_pad_right</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[37e]">lv_obj_get_style_pad_left</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[37c]">lv_obj_get_style_pad_bottom</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[36a]">lv_obj_get_style_outline_width</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[37b]">lv_obj_get_style_outline_blend_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[1c3]">_lv_obj_get_style_opa</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c1]">update_style_cache</a><BR>
 <LI><a href="#[37a]">lv_obj_get_style_margin_top</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[379]">lv_obj_get_style_margin_right</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[378]">lv_obj_get_style_margin_left</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[377]">lv_obj_get_style_margin_bottom</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[376]">lv_obj_get_style_line_blend_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[374]">lv_obj_get_style_image_blend_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[355]">lv_obj_get_style_clip_corner</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[373]">lv_obj_get_style_border_width</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[372]">lv_obj_get_style_border_side</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[35d]">lv_obj_get_style_border_post</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[35b]">lv_obj_get_style_border_blend_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[35a]">lv_obj_get_style_bg_blend_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">_lv_obj_get_style_int</a><BR>
 <LI><a href="#[267]">draw_value_str</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[264]">lv_draw_label</a><BR>
 <LI><a href="#[25e]">draw_pattern</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[264]">lv_draw_label</a><BR>
 <LI><a href="#[3a7]">lv_refr_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a7]">lv_refr_obj</a><BR>
 <LI><a href="#[3a2]">lv_refr_get_top_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a2]">lv_refr_get_top_obj</a><BR>
 <LI><a href="#[391]">refresh_children_style</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[391]">refresh_children_style</a><BR>
 <LI><a href="#[286]">update_style_cache_children</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[286]">update_style_cache_children</a><BR>
 <LI><a href="#[2ef]">lv_event_send_func</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26f]">lv_event_send</a><BR>
 <LI><a href="#[1f3]">apply_theme</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f3]">apply_theme</a><BR>
 <LI><a href="#[393]">report_style_mod_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[393]">report_style_mod_core</a><BR>
 <LI><a href="#[354]">obj_del_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[354]">obj_del_core</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8b]">Cloud_Task</a> from main.o(i.Cloud_Task) referenced from main.o(i.main)
 <LI><a href="#[23]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">EXTI0_IRQHandler</a> from exti.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">EXTI4_IRQHandler</a> from exti.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[88]">KEY_Task</a> from main.o(i.KEY_Task) referenced from main.o(i.main)
 <LI><a href="#[89]">KQM6600_Task</a> from main.o(i.KQM6600_Task) referenced from main.o(i.main)
 <LI><a href="#[86]">LED1_Task</a> from main.o(i.LED1_Task) referenced from main.o(i.main)
 <LI><a href="#[87]">LED4_Task</a> from main.o(i.LED4_Task) referenced from main.o(i.main)
 <LI><a href="#[11]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8d]">SU_03T_TASK</a> from main.o(i.SU_03T_TASK) referenced from main.o(i.main)
 <LI><a href="#[14]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8a]">Sensor_Task</a> from main.o(i.Sensor_Task) referenced from main.o(i.main)
 <LI><a href="#[85]">Swtmr_1s_Callback</a> from main.o(i.Swtmr_1s_Callback) referenced from main.o(i.main)
 <LI><a href="#[17]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[1a]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM3_IRQHandler</a> from tim.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">TIM6_IRQHandler</a> from tim.o(i.TIM6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">UART4_IRQHandler</a> from su_03t.o(i.UART4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">USART2_IRQHandler</a> from kqm6600.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">USART3_IRQHandler</a> from wifi.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[6e]">_lv_disp_refr_task</a> from lv_refr.o(i._lv_disp_refr_task) referenced from lv_hal_disp.o(i.lv_disp_drv_register)
 <LI><a href="#[72]">_lv_ll_get_head</a> from lv_ll.o(i._lv_ll_get_head) referenced from lv_group.o(i.lv_group_focus_next)
 <LI><a href="#[71]">_lv_ll_get_next</a> from lv_ll.o(i._lv_ll_get_next) referenced from lv_group.o(i.lv_group_focus_next)
 <LI><a href="#[73]">_lv_ll_get_prev</a> from lv_ll.o(i._lv_ll_get_prev) referenced from lv_group.o(i.lv_group_focus_prev)
 <LI><a href="#[74]">_lv_ll_get_tail</a> from lv_ll.o(i._lv_ll_get_tail) referenced from lv_group.o(i.lv_group_focus_prev)
 <LI><a href="#[84]">_out_buffer</a> from lv_printf.o(i._out_buffer) referenced from lv_printf.o(i.lv_vsnprintf)
 <LI><a href="#[61]">_out_null</a> from lv_printf.o(i._out_null) referenced from lv_printf.o(i._vsnprintf)
 <LI><a href="#[58]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[57]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[5b]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[5c]">anim_task</a> from lv_anim.o(i.anim_task) referenced from lv_anim.o(i._lv_anim_core_init)
 <LI><a href="#[64]">color_blend_true_color_additive</a> from lv_draw_blend.o(i.color_blend_true_color_additive) referenced from lv_draw_blend.o(i.fill_blended)
 <LI><a href="#[64]">color_blend_true_color_additive</a> from lv_draw_blend.o(i.color_blend_true_color_additive) referenced from lv_draw_blend.o(i.map_blended)
 <LI><a href="#[65]">color_blend_true_color_subtractive</a> from lv_draw_blend.o(i.color_blend_true_color_subtractive) referenced from lv_draw_blend.o(i.fill_blended)
 <LI><a href="#[65]">color_blend_true_color_subtractive</a> from lv_draw_blend.o(i.color_blend_true_color_subtractive) referenced from lv_draw_blend.o(i.map_blended)
 <LI><a href="#[82]">disp_flush</a> from lv_port_disp.o(i.disp_flush) referenced from lv_port_disp.o(i.lv_port_disp_init)
 <LI><a href="#[5a]">fputc</a> from usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[2]">free</a> from mallocr.o(i.__free$realloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[59]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[68]">kern_pair_16_compare</a> from lv_font_fmt_txt.o(i.kern_pair_16_compare) referenced from lv_font_fmt_txt.o(i.get_kern_value)
 <LI><a href="#[67]">kern_pair_8_compare</a> from lv_font_fmt_txt.o(i.kern_pair_8_compare) referenced from lv_font_fmt_txt.o(i.get_kern_value)
 <LI><a href="#[91]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from lv_anim.o(.constdata)
 <LI><a href="#[63]">lv_area_get_height</a> from lv_bar.o(i.lv_area_get_height) referenced from lv_bar.o(i.draw_indic)
 <LI><a href="#[62]">lv_area_get_width</a> from lv_bar.o(i.lv_area_get_width) referenced from lv_bar.o(i.draw_indic)
 <LI><a href="#[6b]">lv_bar_anim</a> from lv_bar.o(i.lv_bar_anim) referenced from lv_bar.o(i.lv_bar_set_value_with_anim)
 <LI><a href="#[6c]">lv_bar_anim_ready</a> from lv_bar.o(i.lv_bar_anim_ready) referenced from lv_bar.o(i.lv_bar_set_value_with_anim)
 <LI><a href="#[6a]">lv_bar_design</a> from lv_bar.o(i.lv_bar_design) referenced from lv_bar.o(i.lv_bar_create)
 <LI><a href="#[69]">lv_bar_signal</a> from lv_bar.o(i.lv_bar_signal) referenced from lv_bar.o(i.lv_bar_create)
 <LI><a href="#[6d]">lv_cont_signal</a> from lv_cont.o(i.lv_cont_signal) referenced from lv_cont.o(i.lv_cont_create)
 <LI><a href="#[6f]">lv_draw_mask_line</a> from lv_draw_mask.o(i.lv_draw_mask_line) referenced from lv_draw_mask.o(i.lv_draw_mask_line_points_init)
 <LI><a href="#[70]">lv_draw_mask_radius</a> from lv_draw_mask.o(i.lv_draw_mask_radius) referenced from lv_draw_mask.o(i.lv_draw_mask_radius_init)
 <LI><a href="#[5]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(i.lv_font_get_bitmap_fmt_txt) referenced 8 times from lv_font_montserrat_14.o(.data)
 <LI><a href="#[4]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt) referenced 8 times from lv_font_montserrat_14.o(.data)
 <LI><a href="#[60]">lv_img_decoder_built_in_close</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_close) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[5d]">lv_img_decoder_built_in_info</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_info) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[5e]">lv_img_decoder_built_in_open</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_open) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[5f]">lv_img_decoder_built_in_read_line</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_read_line) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[76]">lv_img_design</a> from lv_img.o(i.lv_img_design) referenced from lv_img.o(i.lv_img_create)
 <LI><a href="#[75]">lv_img_signal</a> from lv_img.o(i.lv_img_signal) referenced from lv_img.o(i.lv_img_create)
 <LI><a href="#[77]">lv_label_design</a> from lv_label.o(i.lv_label_design) referenced from lv_label.o(i.lv_label_create)
 <LI><a href="#[79]">lv_label_set_offset_x</a> from lv_label.o(i.lv_label_set_offset_x) referenced from lv_label.o(i.lv_label_refr_text)
 <LI><a href="#[79]">lv_label_set_offset_x</a> from lv_label.o(i.lv_label_set_offset_x) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[7a]">lv_label_set_offset_y</a> from lv_label.o(i.lv_label_set_offset_y) referenced from lv_label.o(i.lv_label_refr_text)
 <LI><a href="#[7a]">lv_label_set_offset_y</a> from lv_label.o(i.lv_label_set_offset_y) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[78]">lv_label_signal</a> from lv_label.o(i.lv_label_signal) referenced from lv_label.o(i.lv_label_create)
 <LI><a href="#[7e]">lv_obj_design</a> from lv_obj.o(i.lv_obj_design) referenced from lv_obj.o(i.lv_obj_create)
 <LI><a href="#[7b]">lv_obj_set_x</a> from lv_obj.o(i.lv_obj_set_x) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[7c]">lv_obj_set_y</a> from lv_obj.o(i.lv_obj_set_y) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[7d]">lv_obj_signal</a> from lv_obj.o(i.lv_obj_signal) referenced from lv_obj.o(i.lv_obj_create)
 <LI><a href="#[7]">lv_txt_unicode_to_utf8</a> from lv_txt.o(i.lv_txt_unicode_to_utf8) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[8]">lv_txt_utf8_conv_wc</a> from lv_txt.o(i.lv_txt_utf8_conv_wc) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[b]">lv_txt_utf8_get_byte_id</a> from lv_txt.o(i.lv_txt_utf8_get_byte_id) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[c]">lv_txt_utf8_get_char_id</a> from lv_txt.o(i.lv_txt_utf8_get_char_id) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[d]">lv_txt_utf8_get_length</a> from lv_txt.o(i.lv_txt_utf8_get_length) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[9]">lv_txt_utf8_next</a> from lv_txt.o(i.lv_txt_utf8_next) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[a]">lv_txt_utf8_prev</a> from lv_txt.o(i.lv_txt_utf8_prev) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[6]">lv_txt_utf8_size</a> from lv_txt.o(i.lv_txt_utf8_size) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[54]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1]">malloc</a> from mallocr.o(i.__malloc$realloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[8f]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[8e]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[90]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[3]">realloc</a> from mallocr.o(i.realloc) referenced 2 times from cjson.o(.data)
 <LI><a href="#[83]">theme_apply</a> from lv_theme_material.o(i.theme_apply) referenced from lv_theme_material.o(i.lv_theme_material_init)
 <LI><a href="#[7f]">trans_anim_cb</a> from lv_obj.o(i.trans_anim_cb) referenced from lv_obj.o(i.lv_obj_set_state)
 <LI><a href="#[81]">trans_anim_ready_cb</a> from lv_obj.o(i.trans_anim_ready_cb) referenced from lv_obj.o(i.lv_obj_set_state)
 <LI><a href="#[80]">trans_anim_start_cb</a> from lv_obj.o(i.trans_anim_start_cb) referenced from lv_obj.o(i.lv_obj_set_state)
 <LI><a href="#[66]">unicode_list_compare</a> from lv_font_fmt_txt.o(i.unicode_list_compare) referenced from lv_font_fmt_txt.o(i.get_glyph_dsc_id)
 <LI><a href="#[8c]">vLvglTaskFunction</a> from main.o(i.vLvglTaskFunction) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[56]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[444]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[92]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b6]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[445]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[446]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[447]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[448]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[449]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43b]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44a]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[223]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;case_insensitive_strcmp
</UL>

<P><STRONG><a name="[132]"></a>localtime</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>

<P><STRONG><a name="[44b]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Task
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Cloud_Connect
</UL>

<P><STRONG><a name="[44c]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[44d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[44e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Time
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Connect
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Subscribe_Ali
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Heart_Send
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Cloud_Publish
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Cloud_Connect
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KQM6600_DataAnalysis
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Task
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SendCmdAndRevAck
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SET_AP
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Config
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Test
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ali_AlsDataAck
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMAConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Task
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
</UL>

<P><STRONG><a name="[44f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>

<P><STRONG><a name="[dc]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Time
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Task
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SET_AP
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_CheckAck
</UL>

<P><STRONG><a name="[161]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Time
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SET_AP
</UL>

<P><STRONG><a name="[160]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SET_AP
</UL>

<P><STRONG><a name="[11a]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Cloud_Publish
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SendCmdAndRevAck
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[db]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Task
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_match
</UL>

<P><STRONG><a name="[42a]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot_compare
</UL>

<P><STRONG><a name="[309]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
</UL>

<P><STRONG><a name="[3f1]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_utf8_bom
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[9b]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Time
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_T_H
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_value
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_value
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KQM6600_DataAnalysis
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_T_H
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_value
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_T_H
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KQM6600_DataAnalysis
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_T_H
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_value
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SU03_Send
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Cloud_Publish
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swtmr_1s_Callback
</UL>

<P><STRONG><a name="[450]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[3ed]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_T_H
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KQM6600_DataAnalysis
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_value
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[451]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[452]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[453]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[454]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[ae]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[57]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[9d]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[455]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[456]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[a0]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[93]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[457]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[59]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[b4]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[458]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[459]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>ADC1_Config</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, adc.o(i.ADC1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ADC1_Config &rArr; ADC1_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMAConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Init
</UL>

<P><STRONG><a name="[c4]"></a>ADC1_DMAConfig</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, adc.o(i.ADC1_DMAConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADC1_DMAConfig &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Config
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Init
</UL>

<P><STRONG><a name="[bf]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Config
</UL>

<P><STRONG><a name="[c6]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMAConfig
</UL>

<P><STRONG><a name="[c3]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Config
</UL>

<P><STRONG><a name="[c1]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Config
</UL>

<P><STRONG><a name="[bd]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Config
</UL>

<P><STRONG><a name="[be]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Config
</UL>

<P><STRONG><a name="[c0]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Config
</UL>

<P><STRONG><a name="[c5]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Config
</UL>

<P><STRONG><a name="[c2]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Config
</UL>

<P><STRONG><a name="[ca]"></a>ADC_value</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, adc.o(i.ADC_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ADC_value &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[cb]"></a>Ali_AlsDataAck</STRONG> (Thumb, 152 bytes, Stack size 536 bytes, cloud.o(i.Ali_AlsDataAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = Ali_AlsDataAck &rArr; Mqtt_Cloud_Publish &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Cloud_Publish
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Task
</UL>

<P><STRONG><a name="[123]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[12f]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[12]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>Cloud_Task</STRONG> (Thumb, 382 bytes, Stack size 264 bytes, main.o(i.Cloud_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 2048<LI>Call Chain = Cloud_Task &rArr; Ali_AlsDataAck &rArr; Mqtt_Cloud_Publish &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Time
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Revise_AP_Net
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Connect
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Subscribe_Ali
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Heart_Send
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Cloud_Publish
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Cloud_Connect
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTT_LengthCalculation
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ali_AlsDataAck
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[de]"></a>DHT11_Display</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dht11.o(i.DHT11_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DHT11_Display &rArr; DHT11_Read_T_H &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_T_H
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
</UL>

<P><STRONG><a name="[e0]"></a>DHT11_GPIOConfig</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, dht11.o(i.DHT11_GPIOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DHT11_GPIOConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_T_H
</UL>

<P><STRONG><a name="[df]"></a>DHT11_Read_T_H</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, dht11.o(i.DHT11_Read_T_H))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DHT11_Read_T_H &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_GPIOConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nopus
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nopms
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Display
</UL>

<P><STRONG><a name="[c9]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMAConfig
</UL>

<P><STRONG><a name="[c8]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMAConfig
</UL>

<P><STRONG><a name="[15]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>Delay_nopms</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, delay.o(i.Delay_nopms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay_nopms
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nopus
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_T_H
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Time
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Revise_AP_Net
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetValue
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Task
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SET_AP
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>

<P><STRONG><a name="[e3]"></a>Delay_nopus</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, delay.o(i.Delay_nopus))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_T_H
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nopms
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>

<P><STRONG><a name="[1e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exti.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, exti.o(i.EXTI4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
</UL>

<P><STRONG><a name="[101]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
</UL>

<P><STRONG><a name="[e6]"></a>Flash_Test</STRONG> (Thumb, 68 bytes, Stack size 264 bytes, stm32_eval_spi_flash.o(i.Flash_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Flash_Test &rArr; sFLASH_WriteBuffer &rArr; sFLASH_WritePage &rArr; sFLASH_WriteEnable &rArr; sFLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadBuffer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteBuffer
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadID
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_EraseSector
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Init
</UL>

<P><STRONG><a name="[ba]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_GPIOConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_configlib
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_configlib
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_configlib
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIOConfig
</UL>

<P><STRONG><a name="[e2]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_T_H
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetValue
</UL>

<P><STRONG><a name="[108]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_Task
</UL>

<P><STRONG><a name="[ee]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadBuffer
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Time
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Task
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SET_AP
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WritePage
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteEnable
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WaitForWriteEnd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadID
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_EraseSector
</UL>

<P><STRONG><a name="[ef]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadBuffer
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Time
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Config
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Task
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SET_AP
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WritePage
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteEnable
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WaitForWriteEnd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadID
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_EraseSector
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[d1]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read_T_H
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SU03_DataAnalysis
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_configlib
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_configlib
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ali_AlsDataAck
</UL>

<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>KEY_Task</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, main.o(i.KEY_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = KEY_Task &rArr; lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetValue
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nopms
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[f1]"></a>KEY_configlib</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, key.o(i.KEY_configlib))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY_configlib &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Init
</UL>

<P><STRONG><a name="[f2]"></a>KQM6600_DataAnalysis</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, kqm6600.o(i.KQM6600_DataAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KQM6600_DataAnalysis &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KQM6600_Task
</UL>

<P><STRONG><a name="[89]"></a>KQM6600_Task</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.KQM6600_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = KQM6600_Task &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KQM6600_DataAnalysis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[eb]"></a>Key_GetValue</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, key.o(i.Key_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Key_GetValue &rArr; Delay_nopms
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nopms
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Task
</UL>

<P><STRONG><a name="[f5]"></a>LCD_Clear</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bsp_lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_init
</UL>

<P><STRONG><a name="[f8]"></a>LCD_Color_Fill</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, bsp_lcd.o(i.LCD_Color_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Color_Fill &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush
</UL>

<P><STRONG><a name="[f9]"></a>LCD_Config</STRONG> (Thumb, 13436 bytes, Stack size 8 bytes, bsp_lcd.o(i.LCD_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCD_Config &rArr; LCD_SSD_BackLightSet &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nopus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nopms
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[fe]"></a>LCD_Display_Dir</STRONG> (Thumb, 444 bytes, Stack size 8 bytes, bsp_lcd.o(i.LCD_Display_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Display_Dir &rArr; LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_init
</UL>

<P><STRONG><a name="[100]"></a>LCD_FSMCConfig</STRONG> (Thumb, 124 bytes, Stack size 120 bytes, bsp_lcd.o(i.LCD_FSMCConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_FSMCConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[103]"></a>LCD_GPIOConfig</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, bsp_lcd.o(i.LCD_GPIOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_GPIOConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[104]"></a>LCD_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_Init &rArr; LCD_Config &rArr; LCD_SSD_BackLightSet &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nopms
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadID
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIOConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_init
</UL>

<P><STRONG><a name="[107]"></a>LCD_RD_DATA</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_lcd.o(i.LCD_RD_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_RD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadID
</UL>

<P><STRONG><a name="[105]"></a>LCD_ReadID</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, bsp_lcd.o(i.LCD_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_ReadID &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[106]"></a>LCD_ReadReg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_lcd.o(i.LCD_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_ReadReg &rArr; LCD_RD_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nopus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadID
</UL>

<P><STRONG><a name="[fd]"></a>LCD_SSD_BackLightSet</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bsp_lcd.o(i.LCD_SSD_BackLightSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_SSD_BackLightSet &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>

<P><STRONG><a name="[ff]"></a>LCD_Scan_Dir</STRONG> (Thumb, 744 bytes, Stack size 16 bytes, bsp_lcd.o(i.LCD_Scan_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
</UL>

<P><STRONG><a name="[f6]"></a>LCD_SetCursor</STRONG> (Thumb, 418 bytes, Stack size 8 bytes, bsp_lcd.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[fb]"></a>LCD_WR_DATA</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_lcd.o(i.LCD_WR_DATA))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>

<P><STRONG><a name="[fa]"></a>LCD_WR_REG</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_lcd.o(i.LCD_WR_REG))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadID
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>

<P><STRONG><a name="[f7]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_lcd.o(i.LCD_WriteRAM_Prepare))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[fc]"></a>LCD_WriteReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_lcd.o(i.LCD_WriteReg))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Config
</UL>

<P><STRONG><a name="[86]"></a>LED1_Task</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, main.o(i.LED1_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LED1_Task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[87]"></a>LED4_Task</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.LED4_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LED4_Task &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[10a]"></a>LED_configlib</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, led.o(i.LED_configlib))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_configlib &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Init
</UL>

<P><STRONG><a name="[10f]"></a>MQTTPacket_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mqttpacket.o(i.MQTTPacket_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>

<P><STRONG><a name="[10d]"></a>MQTTPacket_len</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mqttpacket.o(i.MQTTPacket_len))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[10b]"></a>MQTTSerialize_connect</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, mqttconnectclient.o(i.MQTTSerialize_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Cloud_Connect
</UL>

<P><STRONG><a name="[10c]"></a>MQTTSerialize_connectLength</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_connectLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MQTTSerialize_connectLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[114]"></a>MQTTSerialize_pingreq</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_pingreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MQTTSerialize_pingreq &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Heart_Send
</UL>

<P><STRONG><a name="[116]"></a>MQTTSerialize_publish</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, mqttserializepublish.o(i.MQTTSerialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Cloud_Publish
</UL>

<P><STRONG><a name="[117]"></a>MQTTSerialize_publishLength</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, mqttserializepublish.o(i.MQTTSerialize_publishLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[118]"></a>MQTTSerialize_subscribe</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTSerialize_subscribe &rArr; MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Subscribe_Ali
</UL>

<P><STRONG><a name="[119]"></a>MQTTSerialize_subscribeLength</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribeLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
</UL>

<P><STRONG><a name="[115]"></a>MQTTSerialize_zero</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, mqttconnectclient.o(i.MQTTSerialize_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pingreq
</UL>

<P><STRONG><a name="[d9]"></a>MQTT_LengthCalculation</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cloud.o(i.MQTT_LengthCalculation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MQTT_LengthCalculation
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Task
</UL>

<P><STRONG><a name="[113]"></a>MQTTstrlen</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, mqttpacket.o(i.MQTTstrlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
</UL>

<P><STRONG><a name="[11]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>Mqtt_Cloud_Connect</STRONG> (Thumb, 134 bytes, Stack size 96 bytes, cloud.o(i.Mqtt_Cloud_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Mqtt_Cloud_Connect &rArr; MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendBuff
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SendCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Task
</UL>

<P><STRONG><a name="[d0]"></a>Mqtt_Cloud_Publish</STRONG> (Thumb, 216 bytes, Stack size 1128 bytes, cloud.o(i.Mqtt_Cloud_Publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = Mqtt_Cloud_Publish &rArr; MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendBuff
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SendCmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ali_AlsDataAck
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Task
</UL>

<P><STRONG><a name="[d8]"></a>Mqtt_Heart_Send</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cloud.o(i.Mqtt_Heart_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Mqtt_Heart_Send &rArr; MQTTSerialize_pingreq &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendBuff
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pingreq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Task
</UL>

<P><STRONG><a name="[d6]"></a>Mqtt_Subscribe_Ali</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, cloud.o(i.Mqtt_Subscribe_Ali))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Mqtt_Subscribe_Ali &rArr; MQTTSerialize_subscribe &rArr; MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendBuff
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Task
</UL>

<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14f]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_NVICConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Config
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_NVICConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_NVICConfig
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_NVICConfig
</UL>

<P><STRONG><a name="[d3]"></a>Net_Connect</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, wifi.o(i.Net_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Net_Connect &rArr; WIFI_SendCmdAndRevAck &rArr; WIFI_CheckAck &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SendCmdAndRevAck
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Task
</UL>

<P><STRONG><a name="[125]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Time
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[bb]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Config
</UL>

<P><STRONG><a name="[c7]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMAConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
</UL>

<P><STRONG><a name="[124]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Time
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Config
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
</UL>

<P><STRONG><a name="[b9]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_GPIOConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Config
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_configlib
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_configlib
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_configlib
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIOConfig
</UL>

<P><STRONG><a name="[15d]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[127]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[126]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[129]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[128]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[121]"></a>RGB_configlib</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rgb.o(i.RGB_configlib))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RGB_configlib &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Init
</UL>

<P><STRONG><a name="[122]"></a>RTC_Config</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, rtc.o(i.RTC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Config &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Init
</UL>

<P><STRONG><a name="[12c]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_EnterConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[134]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ExitConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[131]"></a>RTC_GetCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>

<P><STRONG><a name="[130]"></a>RTC_GetTime</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rtc.o(i.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = RTC_GetTime &rArr; lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swtmr_1s_Callback
</UL>

<P><STRONG><a name="[12e]"></a>RTC_SetCounter</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Time
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[12d]"></a>RTC_SetPrescaler</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[12b]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForLastTask))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[12a]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[135]"></a>SPI2_Config</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, spi.o(i.SPI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI2_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Init
</UL>

<P><STRONG><a name="[137]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Config
</UL>

<P><STRONG><a name="[421]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>

<P><STRONG><a name="[423]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>

<P><STRONG><a name="[422]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>

<P><STRONG><a name="[136]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Config
</UL>

<P><STRONG><a name="[138]"></a>STM32_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(i.STM32_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = STM32_Init &rArr; lv_port_disp_init &rArr; lv_disp_drv_register &rArr; lv_obj_create &rArr; lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadBuffer
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Config
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendStr
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Config
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_configlib
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_configlib
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_configlib
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Test
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_DMAConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Config
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>SU03T_TxBuff</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, su_03t.o(i.SU03T_TxBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SU03T_TxBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SU03_Send
</UL>

<P><STRONG><a name="[143]"></a>SU03_DataAnalysis</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, su_03t.o(i.SU03_DataAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SU03_DataAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SU_03T_TASK
</UL>

<P><STRONG><a name="[144]"></a>SU03_Send</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, su_03t.o(i.SU03_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SU03_Send &rArr; SU03T_TxBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SU03T_TxBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SU_03T_TASK
</UL>

<P><STRONG><a name="[8d]"></a>SU_03T_TASK</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.SU_03T_TASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SU_03T_TASK &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SU03_Send
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SU03_DataAnalysis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[8a]"></a>Sensor_Task</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.Sensor_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Sensor_Task &rArr; DHT11_Display &rArr; DHT11_Read_T_H &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Display
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[85]"></a>Swtmr_1s_Callback</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, main.o(i.Swtmr_1s_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = Swtmr_1s_Callback &rArr; RTC_GetTime &rArr; lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>TIM3_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, tim.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13b]"></a>TIM6_Config</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tim.o(i.TIM6_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM6_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Init
</UL>

<P><STRONG><a name="[4e]"></a>TIM6_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tim.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM6_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14b]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Config
</UL>

<P><STRONG><a name="[14a]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Config
</UL>

<P><STRONG><a name="[14c]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Config
</UL>

<P><STRONG><a name="[13a]"></a>UART4_Config</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, su_03t.o(i.UART4_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART4_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_NVICConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Init
</UL>

<P><STRONG><a name="[4c]"></a>UART4_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, su_03t.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART4_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[152]"></a>UART4_NVICConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, su_03t.o(i.UART4_NVICConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART4_NVICConfig &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
</UL>

<P><STRONG><a name="[139]"></a>USART1_Config</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, usart.o(i.USART1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART1_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_NVICConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Init
</UL>

<P><STRONG><a name="[3d]"></a>USART1_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[157]"></a>USART1_NVICConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart.o(i.USART1_NVICConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_NVICConfig &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[158]"></a>USART1_Send</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(i.USART1_Send))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendBuff
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendStr
</UL>

<P><STRONG><a name="[11c]"></a>USART1_SendBuff</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, usart.o(i.USART1_SendBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART1_SendBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Subscribe_Ali
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Heart_Send
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Cloud_Publish
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Cloud_Connect
</UL>

<P><STRONG><a name="[13d]"></a>USART1_SendStr</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, usart.o(i.USART1_SendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART1_SendStr
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Init
</UL>

<P><STRONG><a name="[f3]"></a>USART2_Config</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, kqm6600.o(i.USART2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART2_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_NVICConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KQM6600_Task
</UL>

<P><STRONG><a name="[3e]"></a>USART2_IRQHandler</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, kqm6600.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USART2_IRQHandler &rArr; xQueueGiveFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[159]"></a>USART2_NVICConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, kqm6600.o(i.USART2_NVICConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART2_NVICConfig &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
</UL>

<P><STRONG><a name="[15b]"></a>USART3_Config</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, wifi.o(i.USART3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART3_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_NVICConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Config
</UL>

<P><STRONG><a name="[3f]"></a>USART3_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, wifi.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15c]"></a>USART3_NVICConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wifi.o(i.USART3_NVICConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART3_NVICConfig &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
</UL>

<P><STRONG><a name="[11f]"></a>USART3_Send</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wifi.o(i.USART3_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Subscribe_Ali
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Heart_Send
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SendCmd
</UL>

<P><STRONG><a name="[155]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
</UL>

<P><STRONG><a name="[141]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SU03T_TxBuff
</UL>

<P><STRONG><a name="[154]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_NVICConfig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_NVICConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_NVICConfig
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_NVICConfig
</UL>

<P><STRONG><a name="[151]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
</UL>

<P><STRONG><a name="[142]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SU03T_TxBuff
</UL>

<P><STRONG><a name="[13]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15e]"></a>WIFI_CheckAck</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, wifi.o(i.WIFI_CheckAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WIFI_CheckAck &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SendCmdAndRevAck
</UL>

<P><STRONG><a name="[13c]"></a>WIFI_Config</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, wifi.o(i.WIFI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = WIFI_Config &rArr; USART3_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nopms
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Init
</UL>

<P><STRONG><a name="[dd]"></a>WIFI_Revise_AP_Net</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, wifi.o(i.WIFI_Revise_AP_Net))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WIFI_Revise_AP_Net &rArr; WIFI_SendCmdAndRevAck &rArr; WIFI_CheckAck &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nopms
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SendCmdAndRevAck
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SET_AP
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Task
</UL>

<P><STRONG><a name="[15f]"></a>WIFI_SET_AP</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, wifi.o(i.WIFI_SET_AP))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WIFI_SET_AP &rArr; sFLASH_WriteBuffer &rArr; sFLASH_WritePage &rArr; sFLASH_WriteEnable &rArr; sFLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nopms
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteBuffer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_EraseSector
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Revise_AP_Net
</UL>

<P><STRONG><a name="[11d]"></a>WIFI_SendCmd</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wifi.o(i.WIFI_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WIFI_SendCmd &rArr; USART3_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Time
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Cloud_Publish
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Cloud_Connect
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SendCmdAndRevAck
</UL>

<P><STRONG><a name="[120]"></a>WIFI_SendCmdAndRevAck</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, wifi.o(i.WIFI_SendCmdAndRevAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = WIFI_SendCmdAndRevAck &rArr; WIFI_CheckAck &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SendCmd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_CheckAck
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Revise_AP_Net
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Connect
</UL>

<P><STRONG><a name="[d4]"></a>WIFI_Time</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, wifi.o(i.WIFI_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WIFI_Time &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_nopms
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SendCmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Task
</UL>

<P><STRONG><a name="[162]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[45a]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[ce]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Subscribe_Ali
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Test
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Display
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ali_AlsDataAck
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED4_Task
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_Task
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Task
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Task
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadID
</UL>

<P><STRONG><a name="[45b]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[45c]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[164]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[45d]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[cf]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Connect
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Cloud_Publish
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ali_AlsDataAck
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swtmr_1s_Callback
</UL>

<P><STRONG><a name="[45e]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[45f]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[460]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[2]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[461]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[462]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[463]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[af]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[16a]"></a>_lv_anim_core_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_anim.o(i._lv_anim_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _lv_anim_core_init &rArr; lv_task_create &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[16e]"></a>_lv_area_align</STRONG> (Thumb, 868 bytes, Stack size 32 bytes, lv_area.o(i._lv_area_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_area_align
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_value_str
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[177]"></a>_lv_area_intersect</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, lv_area.o(i._lv_area_intersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[171]"></a>_lv_area_is_in</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, lv_area.o(i._lv_area_is_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[3a5]"></a>_lv_area_is_on</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lv_area.o(i._lv_area_is_on))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
</UL>

<P><STRONG><a name="[172]"></a>_lv_area_is_point_on</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, lv_area.o(i._lv_area_is_point_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_within_circle
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_point_on_coords
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
</UL>

<P><STRONG><a name="[3a6]"></a>_lv_area_join</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lv_area.o(i._lv_area_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_area_join
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
</UL>

<P><STRONG><a name="[174]"></a>_lv_blend_fill</STRONG> (Thumb, 266 bytes, Stack size 80 bytes, lv_draw_blend.o(i._lv_blend_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _lv_blend_fill &rArr; fill_normal &rArr; lv_color_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_set_px
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_blended
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
</UL>

<P><STRONG><a name="[17c]"></a>_lv_blend_map</STRONG> (Thumb, 276 bytes, Stack size 88 bytes, lv_draw_blend.o(i._lv_blend_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _lv_blend_map &rArr; map_normal &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_set_px
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_blended
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[6e]"></a>_lv_disp_refr_task</STRONG> (Thumb, 454 bytes, Stack size 56 bytes, lv_refr.o(i._lv_disp_refr_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = _lv_disp_refr_task &rArr; lv_refr_areas &rArr; lv_refr_area &rArr; lv_refr_area_part &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_free_all
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_font_clean_up_fmt_txt
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_areas
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_disp.o(i.lv_disp_drv_register)
</UL>
<P><STRONG><a name="[18e]"></a>_lv_font_clean_up_fmt_txt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_font_fmt_txt.o(i._lv_font_clean_up_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _lv_font_clean_up_fmt_txt &rArr; lv_mem_free &rArr; lv_mem_defrag &rArr; ent_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[190]"></a>_lv_fs_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_fs.o(i._lv_fs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_fs_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[191]"></a>_lv_group_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_group.o(i._lv_group_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_group_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[192]"></a>_lv_img_buf_get_transformed_area</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, lv_img_buf.o(i._lv_img_buf_get_transformed_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _lv_img_buf_get_transformed_area
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[198]"></a>_lv_img_buf_transform_anti_alias</STRONG> (Thumb, 824 bytes, Stack size 88 bytes, lv_img_buf.o(i._lv_img_buf_transform_anti_alias))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _lv_img_buf_transform_anti_alias &rArr; lv_img_buf_get_px_color &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>

<P><STRONG><a name="[19b]"></a>_lv_img_buf_transform_init</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, lv_img_buf.o(i._lv_img_buf_transform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_img_buf_transform_init
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_is_chroma_keyed
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_has_alpha
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[19e]"></a>_lv_img_cache_open</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, lv_img_cache.o(i._lv_img_cache_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _lv_img_cache_open &rArr; lv_img_decoder_open &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_match
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[1a2]"></a>_lv_img_decoder_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lv_img_decoder.o(i._lv_img_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _lv_img_decoder_init &rArr; lv_img_decoder_create &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_read_line_cb
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_open_cb
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_info_cb
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_set_close_cb
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[1aa]"></a>_lv_indev_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_indev.o(i._lv_indev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_indev_init &rArr; lv_indev_reset &rArr; lv_indev_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[1ac]"></a>_lv_inv_area</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, lv_refr.o(i._lv_inv_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[1b0]"></a>_lv_ll_chg_list</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lv_ll.o(i._lv_ll_chg_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_ll_chg_list &rArr; _lv_ll_remove &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
</UL>

<P><STRONG><a name="[72]"></a>_lv_ll_get_head</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_head))
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_next)
</UL>
<P><STRONG><a name="[71]"></a>_lv_ll_get_next</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_next))
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_next)
</UL>
<P><STRONG><a name="[73]"></a>_lv_ll_get_prev</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_prev))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[74]"></a>_lv_ll_get_tail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_tail))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[16b]"></a>_lv_ll_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_init))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_task_core_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[1b4]"></a>_lv_ll_ins_head</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_ll.o(i._lv_ll_ins_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
</UL>

<P><STRONG><a name="[1b6]"></a>_lv_ll_ins_prev</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lv_ll.o(i._lv_ll_ins_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _lv_ll_ins_prev &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>

<P><STRONG><a name="[1b7]"></a>_lv_ll_ins_tail</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_ll.o(i._lv_ll_ins_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _lv_ll_ins_tail &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>

<P><STRONG><a name="[297]"></a>_lv_ll_is_empty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>

<P><STRONG><a name="[1b8]"></a>_lv_ll_move_before</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lv_ll.o(i._lv_ll_move_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_ll_move_before &rArr; _lv_ll_remove &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
</UL>

<P><STRONG><a name="[1b1]"></a>_lv_ll_remove</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lv_ll.o(i._lv_ll_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _lv_ll_remove &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_chg_list
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_del
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
</UL>

<P><STRONG><a name="[295]"></a>_lv_map</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, lv_math.o(i._lv_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _lv_map
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_linear
</UL>

<P><STRONG><a name="[18d]"></a>_lv_mem_buf_free_all</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lv_mem.o(i._lv_mem_buf_free_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _lv_mem_buf_free_all &rArr; lv_mem_free &rArr; lv_mem_defrag &rArr; ent_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[186]"></a>_lv_mem_buf_get</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, lv_mem.o(i._lv_mem_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_rotate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[18a]"></a>_lv_mem_buf_release</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, lv_mem.o(i._lv_mem_buf_release))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_rotate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[2f1]"></a>_lv_mem_get_size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_mem.o(i._lv_mem_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[320]"></a>_lv_mem_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_mem.o(i._lv_mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[189]"></a>_lv_memcpy</STRONG> (Thumb, 632 bytes, Stack size 24 bytes, lv_mem.o(i._lv_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
</UL>

<P><STRONG><a name="[23f]"></a>_lv_memset</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, lv_mem.o(i._lv_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[18b]"></a>_lv_memset_00</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, lv_mem.o(i._lv_memset_00))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_buf_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_steep
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_flat
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[249]"></a>_lv_memset_ff</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, lv_mem.o(i._lv_memset_ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_memset_ff
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[1ba]"></a>_lv_obj_disable_style_caching</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lv_obj.o(i._lv_obj_disable_style_caching))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_obj_disable_style_caching &rArr; lv_obj_get_style_list &rArr; lv_signal_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[1bc]"></a>_lv_obj_get_style_color</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, lv_obj.o(i._lv_obj_get_style_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _lv_obj_get_style_color &rArr; lv_obj_get_state &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_color
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_recolor
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[1c0]"></a>_lv_obj_get_style_int</STRONG> (Thumb, 644 bytes, Stack size 48 bytes, lv_obj.o(i._lv_obj_get_style_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_int
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_ofs_y
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_ofs_x
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_letter_space
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_blend_mode
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_align
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_decor
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_blend_mode
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_y
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_x
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_blend_mode
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_blend_mode
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_inner
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_blend_mode
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_blend_mode
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_blend_mode
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_blend_mode
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_blend_mode
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_inner
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[1c3]"></a>_lv_obj_get_style_opa</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, lv_obj.o(i._lv_obj_get_style_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + In Cycle
<LI>Call Chain = _lv_obj_get_style_opa &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_opa
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_opa
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_recolor_opa
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[1c5]"></a>_lv_obj_get_style_ptr</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, lv_obj.o(i._lv_obj_get_style_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + In Cycle
<LI>Call Chain = _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_font_normal
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_ptr
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_str
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_font
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_image
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
</UL>

<P><STRONG><a name="[175]"></a>_lv_refr_get_disp_refreshing</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_refr.o(i._lv_refr_get_disp_refreshing))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_set_px
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_set_px
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
</UL>

<P><STRONG><a name="[324]"></a>_lv_refr_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_refr.o(i._lv_refr_init))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2ee]"></a>_lv_sqrt</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lv_math.o(i._lv_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
</UL>

<P><STRONG><a name="[1c8]"></a>_lv_style_get_color</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lv_style.o(i._lv_style_get_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _lv_style_get_color &rArr; get_property_index &rArr; get_style_prop_id &rArr; get_style_prop &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_color
</UL>

<P><STRONG><a name="[1cc]"></a>_lv_style_get_int</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lv_style.o(i._lv_style_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _lv_style_get_int &rArr; get_property_index &rArr; get_style_prop_id &rArr; get_style_prop &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_int
</UL>

<P><STRONG><a name="[1cd]"></a>_lv_style_get_mem_size</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_style.o(i._lv_style_get_mem_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _lv_style_get_mem_size &rArr; get_style_prop_id &rArr; get_style_prop &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_id
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_prop_index
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>

<P><STRONG><a name="[1d0]"></a>_lv_style_get_opa</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lv_style.o(i._lv_style_get_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _lv_style_get_opa &rArr; get_property_index &rArr; get_style_prop_id &rArr; get_style_prop &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_opa
</UL>

<P><STRONG><a name="[1d1]"></a>_lv_style_get_ptr</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lv_style.o(i._lv_style_get_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = _lv_style_get_ptr &rArr; get_property_index &rArr; get_style_prop_id &rArr; get_style_prop &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_ptr
</UL>

<P><STRONG><a name="[1d2]"></a>_lv_style_list_add_style</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, lv_style.o(i._lv_style_list_add_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _lv_style_list_add_style &rArr; _lv_style_list_remove_style &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_remove_style
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[1d4]"></a>_lv_style_list_add_trans_style</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lv_style.o(i._lv_style_list_add_trans_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _lv_style_list_add_trans_style &rArr; _lv_style_list_add_style &rArr; _lv_style_list_remove_style &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[1be]"></a>_lv_style_list_get_color</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, lv_style.o(i._lv_style_list_get_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _lv_style_list_get_color &rArr; _lv_style_get_color &rArr; get_property_index &rArr; get_style_prop_id &rArr; get_style_prop &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_color
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>

<P><STRONG><a name="[1c2]"></a>_lv_style_list_get_int</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, lv_style.o(i._lv_style_list_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _lv_style_list_get_int &rArr; _lv_style_get_int &rArr; get_property_index &rArr; get_style_prop_id &rArr; get_style_prop &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_int
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>

<P><STRONG><a name="[1c4]"></a>_lv_style_list_get_opa</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, lv_style.o(i._lv_style_list_get_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _lv_style_list_get_opa &rArr; _lv_style_get_opa &rArr; get_property_index &rArr; get_style_prop_id &rArr; get_style_prop &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_opa
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>

<P><STRONG><a name="[1c6]"></a>_lv_style_list_get_ptr</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, lv_style.o(i._lv_style_list_get_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _lv_style_list_get_ptr &rArr; _lv_style_get_ptr &rArr; get_property_index &rArr; get_style_prop_id &rArr; get_style_prop &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_ptr
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>

<P><STRONG><a name="[1d5]"></a>_lv_style_list_get_transition_style</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_style.o(i._lv_style_list_get_transition_style))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
</UL>

<P><STRONG><a name="[1d3]"></a>_lv_style_list_remove_style</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, lv_style.o(i._lv_style_list_remove_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _lv_style_list_remove_style &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
</UL>

<P><STRONG><a name="[1d8]"></a>_lv_style_list_reset</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lv_style.o(i._lv_style_list_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _lv_style_list_reset &rArr; lv_style_reset &rArr; lv_mem_free &rArr; lv_mem_defrag &rArr; ent_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_local_style
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
</UL>

<P><STRONG><a name="[1db]"></a>_lv_style_set_color</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, lv_style.o(i._lv_style_set_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_resize
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_value_color
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_grad_color
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_end_color
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_image_recolor
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_image_recolor
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_color
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_color
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
</UL>

<P><STRONG><a name="[1dd]"></a>_lv_style_set_int</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, lv_style.o(i._lv_style_set_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_resize
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_time
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_6
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_5
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_delay
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_width
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_width
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_end_line_width
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_margin_top
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_margin_bottom
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_rounded
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_letter_space
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_dir
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_dir
</UL>

<P><STRONG><a name="[1de]"></a>_lv_style_set_opa</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, lv_style.o(i._lv_style_set_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_resize
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pattern_opa
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_opa
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_image_recolor_opa
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_image_opa
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_opa
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
</UL>

<P><STRONG><a name="[1df]"></a>_lv_style_set_ptr</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, lv_style.o(i._lv_style_set_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _lv_style_set_ptr &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_resize
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_value_font
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
</UL>

<P><STRONG><a name="[1e0]"></a>_lv_task_core_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_task.o(i._lv_task_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_task_core_init
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[193]"></a>_lv_trigo_sin</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, lv_math.o(i._lv_trigo_sin))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
</UL>

<P><STRONG><a name="[1e2]"></a>_lv_txt_get_next_line</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, lv_txt.o(i._lv_txt_get_next_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_word
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[1e4]"></a>_lv_txt_get_size</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, lv_txt.o(i._lv_txt_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_width
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_value_str
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[1e5]"></a>_lv_txt_get_width</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, lv_txt.o(i._lv_txt_get_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _lv_txt_get_width &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[1e6]"></a>_lv_txt_is_cmd</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lv_txt.o(i._lv_txt_is_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_width
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_word
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[1e8]"></a>_lv_txt_set_text_vfmt</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lv_txt.o(i._lv_txt_set_text_vfmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ntoa_long_long &rArr; _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
</UL>

<P><STRONG><a name="[278]"></a>_lv_utils_bsearch</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, lv_utils.o(i._lv_utils_bsearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kern_value
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>

<P><STRONG><a name="[d2]"></a>cJSON_Delete</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, cjson.o(i.cJSON_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = cJSON_Delete &rArr;  cJSON_Delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ali_AlsDataAck
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[cd]"></a>cJSON_GetObjectItem</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cjson.o(i.cJSON_GetObjectItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cJSON_GetObjectItem &rArr; get_object_item &rArr; case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ali_AlsDataAck
</UL>

<P><STRONG><a name="[cc]"></a>cJSON_Parse</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(i.cJSON_Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ali_AlsDataAck
</UL>

<P><STRONG><a name="[21a]"></a>cJSON_ParseWithLengthOpts</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, cjson.o(i.cJSON_ParseWithLengthOpts))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_utf8_bom
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>

<P><STRONG><a name="[219]"></a>cJSON_ParseWithOpts</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cjson.o(i.cJSON_ParseWithOpts))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = cJSON_ParseWithOpts &rArr; cJSON_ParseWithLengthOpts &rArr; parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>

<P><STRONG><a name="[5a]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[292]"></a>lv_anim_del</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lv_anim.o(i.lv_anim_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_anim_del &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_signal
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[293]"></a>lv_anim_get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_anim.o(i.lv_anim_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_anim_get
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[294]"></a>lv_anim_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_anim.o(i.lv_anim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_anim_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[91]"></a>lv_anim_path_linear</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lv_anim.o(i.lv_anim_path_linear))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_anim_path_linear &rArr; _lv_map
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_map
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_anim.o(.constdata)
</UL>
<P><STRONG><a name="[340]"></a>lv_anim_speed_to_time</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, lv_anim.o(i.lv_anim_speed_to_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_anim_speed_to_time
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[296]"></a>lv_anim_start</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lv_anim.o(i.lv_anim_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_anim_start &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[25b]"></a>lv_area_get_size</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_area.o(i.lv_area_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_areas
</UL>

<P><STRONG><a name="[3a3]"></a>lv_area_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_area.o(i.lv_area_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[316]"></a>lv_area_set_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_set_height))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[29b]"></a>lv_bar_create</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, lv_bar.o(i.lv_bar_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = lv_bar_create &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_design_cb
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_init_anim
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
</UL>

<P><STRONG><a name="[2ab]"></a>lv_bar_get_type</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_bar.o(i.lv_bar_get_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_bar_get_type &rArr; lv_obj_get_ext_attr &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_range
</UL>

<P><STRONG><a name="[2ac]"></a>lv_bar_set_anim_time</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_bar.o(i.lv_bar_set_anim_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_bar_set_anim_time &rArr; lv_obj_get_ext_attr &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
</UL>

<P><STRONG><a name="[2ad]"></a>lv_bar_set_range</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lv_bar.o(i.lv_bar_set_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = lv_bar_set_range &rArr; lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
</UL>

<P><STRONG><a name="[ed]"></a>lv_bar_set_value</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lv_bar.o(i.lv_bar_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Task
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_range
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>

<P><STRONG><a name="[212]"></a>lv_color_darken</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lv_color.o(i.lv_color_darken))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_color_darken &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[26b]"></a>lv_color_fill</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lv_color.o(i.lv_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_color_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
</UL>

<P><STRONG><a name="[289]"></a>lv_color_lighten</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lv_color.o(i.lv_color_lighten))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_color_lighten &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[2b3]"></a>lv_cont_create</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, lv_cont.o(i.lv_cont_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = lv_cont_create &rArr; lv_obj_del &rArr; obj_del_core &rArr;  obj_del_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_design_cb
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[2b4]"></a>lv_cont_get_layout</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_cont.o(i.lv_cont_get_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_cont_get_layout &rArr; lv_obj_get_ext_attr &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
</UL>

<P><STRONG><a name="[2cf]"></a>lv_cont_set_fit4</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lv_cont.o(i.lv_cont_set_fit4))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_cont_set_fit4 &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_fit
</UL>

<P><STRONG><a name="[2d0]"></a>lv_cont_set_layout</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lv_cont.o(i.lv_cont_set_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_cont_set_layout &rArr; lv_obj_get_ext_attr &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[1a4]"></a>lv_debug_check_null</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_debug.o(i.lv_debug_check_null))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_focused
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_remove_style
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_adv_hittest
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_fit
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_design_cb
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_base_dir
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_auto_realign
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_protect
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_mid
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_protect
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_layout
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_range
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_anim_time
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_type
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_style
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_layout
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_fit4
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_auto_size
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_align
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_recolor
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_align
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_sel_start
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_sel_end
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_recolor
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_long_mode
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[1a5]"></a>lv_debug_log_error</STRONG> (Thumb, 120 bytes, Stack size 288 bytes, lv_debug.o(i.lv_debug_log_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_focused
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_remove_style
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_adv_hittest
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_fit
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_design_cb
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_base_dir
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_auto_realign
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_protect
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_mid
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_protect
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_layout
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_range
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_anim_time
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_type
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_style
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_layout
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_fit4
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_auto_size
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_align
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_recolor
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_align
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_sel_start
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_sel_end
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_recolor
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_long_mode
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[2d2]"></a>lv_disp_buf_init</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lv_hal_disp.o(i.lv_disp_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_disp_buf_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[2d3]"></a>lv_disp_drv_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lv_hal_disp.o(i.lv_disp_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_disp_drv_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[2d4]"></a>lv_disp_drv_register</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, lv_hal_disp.o(i.lv_disp_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = lv_disp_drv_register &rArr; lv_obj_create &rArr; lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_reset_style_list
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_ready
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[235]"></a>lv_disp_flush_ready</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_flush_ready))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush
</UL>

<P><STRONG><a name="[176]"></a>lv_disp_get_buf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_buf))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_rotate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>

<P><STRONG><a name="[1ad]"></a>lv_disp_get_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
</UL>

<P><STRONG><a name="[1f6]"></a>lv_disp_get_dpi</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, lv_hal_disp.o(i.lv_disp_get_dpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lv_disp_get_dpi
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[187]"></a>lv_disp_get_hor_res</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, lv_hal_disp.o(i.lv_disp_get_hor_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lv_disp_get_hor_res
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
</UL>

<P><STRONG><a name="[2d7]"></a>lv_disp_get_layer_sys</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_layer_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_sys
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[2d8]"></a>lv_disp_get_layer_top</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_layer_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_top
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[2d9]"></a>lv_disp_get_next</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_hal_disp.o(i.lv_disp_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
</UL>

<P><STRONG><a name="[2da]"></a>lv_disp_get_scr_act</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_scr_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_scr_act
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[2db]"></a>lv_disp_get_scr_prev</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_scr_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_scr_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[20f]"></a>lv_disp_get_size_category</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lv_hal_disp.o(i.lv_disp_get_size_category))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_disp_get_size_category &rArr; lv_disp_get_hor_res
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[1ae]"></a>lv_disp_get_ver_res</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, lv_hal_disp.o(i.lv_disp_get_ver_res))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lv_disp_get_ver_res
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[2dc]"></a>lv_disp_is_double_buf</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_is_double_buf))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[184]"></a>lv_disp_is_true_double_buf</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, lv_hal_disp.o(i.lv_disp_is_true_double_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lv_disp_is_true_double_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_double_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_rotate
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>

<P><STRONG><a name="[2dd]"></a>lv_disp_load_scr</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_disp.o(i.lv_disp_load_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_disp_load_scr &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load
</UL>

<P><STRONG><a name="[263]"></a>lv_draw_img</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_draw_img.o(i.lv_draw_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[261]"></a>lv_draw_img_dsc_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_draw_img.o(i.lv_draw_img_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_draw_img_dsc_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[264]"></a>lv_draw_label</STRONG> (Thumb, 1578 bytes, Stack size 272 bytes, lv_draw_label.o(i.lv_draw_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_width
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_char_to_num
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_value_str
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[262]"></a>lv_draw_label_dsc_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_draw_label.o(i.lv_draw_label_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_draw_label_dsc_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_value_str
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[2e4]"></a>lv_draw_line</STRONG> (Thumb, 500 bytes, Stack size 136 bytes, lv_draw_line.o(i.lv_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[2e1]"></a>lv_draw_line_dsc_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_draw_line.o(i.lv_draw_line_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_draw_line_dsc_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[23d]"></a>lv_draw_mask_add</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lv_draw_mask.o(i.lv_draw_mask_add))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[240]"></a>lv_draw_mask_apply</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, lv_draw_mask.o(i.lv_draw_mask_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[23a]"></a>lv_draw_mask_get_cnt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_draw_mask.o(i.lv_draw_mask_get_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[25a]"></a>lv_draw_mask_line_points_init</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, lv_draw_mask.o(i.lv_draw_mask_line_points_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_draw_mask_line_points_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
</UL>

<P><STRONG><a name="[23c]"></a>lv_draw_mask_radius_init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, lv_draw_mask.o(i.lv_draw_mask_radius_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_draw_mask_radius_init &rArr; lv_area_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[314]"></a>lv_draw_mask_remove_custom</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_draw_mask.o(i.lv_draw_mask_remove_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_mask_remove_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[241]"></a>lv_draw_mask_remove_id</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_draw_mask.o(i.lv_draw_mask_remove_id))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[246]"></a>lv_draw_rect</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_draw_rect.o(i.lv_draw_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_value_str
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_outline
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[243]"></a>lv_draw_rect_dsc_init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lv_draw_rect.o(i.lv_draw_rect_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_draw_rect_dsc_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[26f]"></a>lv_event_send</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lv_obj.o(i.lv_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_event_send &rArr; lv_event_send_func &rArr;  lv_event_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
</UL>

<P><STRONG><a name="[2ef]"></a>lv_event_send_func</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, lv_obj.o(i.lv_event_send_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + In Cycle
<LI>Call Chain = lv_event_send_func &rArr;  lv_event_send (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>

<P><STRONG><a name="[5]"></a>lv_font_get_bitmap_fmt_txt</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, lv_font_fmt_txt.o(i.lv_font_get_bitmap_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = lv_font_get_bitmap_fmt_txt &rArr; decompress &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_get_size
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Address Reference Count : 4]<UL><LI> lv_font_montserrat_14.o(.data)
<LI> lv_font_simsun_20.o(.data)
<LI> lv_font_simsun_12.o(.data)
<LI> lv_font_simsun_15.o(.data)
</UL>
<P><STRONG><a name="[2e6]"></a>lv_font_get_glyph_bitmap</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_font.o(i.lv_font_get_glyph_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_font_get_glyph_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[2e5]"></a>lv_font_get_glyph_dsc</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lv_font.o(i.lv_font_get_glyph_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_font_get_glyph_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[4]"></a>lv_font_get_glyph_dsc_fmt_txt</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_font_get_glyph_dsc_fmt_txt &rArr; get_kern_value &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kern_value
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 4]<UL><LI> lv_font_montserrat_14.o(.data)
<LI> lv_font_simsun_20.o(.data)
<LI> lv_font_simsun_12.o(.data)
<LI> lv_font_simsun_15.o(.data)
</UL>
<P><STRONG><a name="[1e7]"></a>lv_font_get_glyph_width</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, lv_font.o(i.lv_font_get_glyph_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_width
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_word
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[2f2]"></a>lv_fs_close</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_fs.o(i.lv_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_fs_close &rArr; lv_mem_free &rArr; lv_mem_defrag &rArr; ent_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
</UL>

<P><STRONG><a name="[2f3]"></a>lv_fs_get_drv</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_fs.o(i.lv_fs_get_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_fs_get_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
</UL>

<P><STRONG><a name="[2f4]"></a>lv_fs_get_ext</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_fs.o(i.lv_fs_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_fs_get_ext
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[2f5]"></a>lv_fs_open</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, lv_fs.o(i.lv_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lv_fs_open &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_real_path
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[303]"></a>lv_fs_read</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lv_fs.o(i.lv_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_fs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_true_color
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[305]"></a>lv_fs_seek</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_fs.o(i.lv_fs_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_fs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_true_color
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[2f7]"></a>lv_group_add_obj</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lv_group.o(i.lv_group_add_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_focused
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[2fa]"></a>lv_group_focus_next</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_group.o(i.lv_group_focus_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lv_group_focus_next &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>

<P><STRONG><a name="[2fb]"></a>lv_group_focus_prev</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_group.o(i.lv_group_focus_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>

<P><STRONG><a name="[39e]"></a>lv_group_get_editing</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_editing))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
</UL>

<P><STRONG><a name="[38f]"></a>lv_group_get_focused</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_focused))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_focused
</UL>

<P><STRONG><a name="[2fc]"></a>lv_group_remove_obj</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_remove_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lv_group_remove_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[197]"></a>lv_img_buf_get_px_alpha</STRONG> (Thumb, 298 bytes, Stack size 44 bytes, lv_img_buf.o(i.lv_img_buf_get_px_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_img_buf_get_px_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>

<P><STRONG><a name="[196]"></a>lv_img_buf_get_px_color</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, lv_img_buf.o(i.lv_img_buf_get_px_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lv_img_buf_get_px_color &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>

<P><STRONG><a name="[2fe]"></a>lv_img_cache_invalidate_src</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lv_img_cache.o(i.lv_img_cache_invalidate_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_img_cache_invalidate_src &rArr; lv_img_decoder_close &rArr; lv_mem_free &rArr; lv_mem_defrag &rArr; ent_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_match
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
</UL>

<P><STRONG><a name="[2ff]"></a>lv_img_cache_set_size</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, lv_img_cache.o(i.lv_img_cache_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_img_cache_set_size &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2fd]"></a>lv_img_cf_get_px_size</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_cf_get_px_size))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_true_color
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[19d]"></a>lv_img_cf_has_alpha</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_cf_has_alpha))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[19c]"></a>lv_img_cf_is_chroma_keyed</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_cf_is_chroma_keyed))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[300]"></a>lv_img_create</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, lv_img.o(i.lv_img_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = lv_img_create &rArr; lv_img_set_src &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_adv_hittest
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
</UL>

<P><STRONG><a name="[60]"></a>lv_img_decoder_built_in_close</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_img_decoder_built_in_close &rArr; lv_fs_close &rArr; lv_mem_free &rArr; lv_mem_defrag &rArr; ent_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[5d]"></a>lv_img_decoder_built_in_info</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lv_img_decoder_built_in_info &rArr; lv_fs_open &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[5e]"></a>lv_img_decoder_built_in_open</STRONG> (Thumb, 562 bytes, Stack size 48 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_img_decoder_built_in_open &rArr; lv_fs_open &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[5f]"></a>lv_img_decoder_built_in_read_line</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lv_img_decoder_built_in_read_line &rArr; lv_img_decoder_built_in_line_alpha &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_true_color
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[1a0]"></a>lv_img_decoder_close</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_img_decoder.o(i.lv_img_decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_img_decoder_close &rArr; lv_mem_free &rArr; lv_mem_defrag &rArr; ent_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
</UL>

<P><STRONG><a name="[1a3]"></a>lv_img_decoder_create</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_img_decoder.o(i.lv_img_decoder_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_img_decoder_create &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[260]"></a>lv_img_decoder_get_info</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lv_img_decoder.o(i.lv_img_decoder_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_img_decoder_get_info &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[1a1]"></a>lv_img_decoder_open</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, lv_img_decoder.o(i.lv_img_decoder_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_img_decoder_open &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
</UL>

<P><STRONG><a name="[317]"></a>lv_img_decoder_read_line</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, lv_img_decoder.o(i.lv_img_decoder_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_img_decoder_read_line
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[1a9]"></a>lv_img_decoder_set_close_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_img_decoder.o(i.lv_img_decoder_set_close_cb))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[1a6]"></a>lv_img_decoder_set_info_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_img_decoder.o(i.lv_img_decoder_set_info_cb))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[1a7]"></a>lv_img_decoder_set_open_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_img_decoder.o(i.lv_img_decoder_set_open_cb))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[1a8]"></a>lv_img_decoder_set_read_line_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_img_decoder.o(i.lv_img_decoder_set_read_line_cb))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[318]"></a>lv_img_get_auto_size</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_img.o(i.lv_img_get_auto_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_img_get_auto_size &rArr; lv_obj_get_ext_attr &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[319]"></a>lv_img_set_angle</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, lv_img.o(i.lv_img_set_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lv_img_set_angle &rArr; lv_obj_get_style_transform_zoom &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
</UL>

<P><STRONG><a name="[31c]"></a>lv_img_set_pivot</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, lv_img.o(i.lv_img_set_pivot))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lv_img_set_pivot &rArr; lv_obj_get_style_transform_zoom &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
</UL>

<P><STRONG><a name="[302]"></a>lv_img_set_src</STRONG> (Thumb, 468 bytes, Stack size 56 bytes, lv_img.o(i.lv_img_set_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = lv_img_set_src &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_auto_size
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
</UL>

<P><STRONG><a name="[25f]"></a>lv_img_src_get_type</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_src_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_match
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
</UL>

<P><STRONG><a name="[2f0]"></a>lv_indev_get_act</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_act))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
</UL>

<P><STRONG><a name="[31f]"></a>lv_indev_get_next</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_hal_indev.o(i.lv_indev_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[3e8]"></a>lv_indev_get_obj_act</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_obj_act))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[1ab]"></a>lv_indev_reset</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, lv_indev.o(i.lv_indev_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_indev_reset &rArr; lv_indev_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[13e]"></a>lv_init</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, lv_obj.o(i.lv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = lv_init &rArr; lv_theme_material_init &rArr; lv_obj_report_style_mod &rArr; report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_set_act
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_task_core_init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Init
</UL>

<P><STRONG><a name="[325]"></a>lv_label_create</STRONG> (Thumb, 484 bytes, Stack size 32 bytes, lv_label.o(i.lv_label_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = lv_label_create &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_get_size
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_align
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_recolor
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_align
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_recolor
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_long_mode
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
</UL>

<P><STRONG><a name="[32b]"></a>lv_label_get_align</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_get_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_label_get_align &rArr; lv_obj_get_ext_attr &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[337]"></a>lv_label_get_letter_on</STRONG> (Thumb, 616 bytes, Stack size 112 bytes, lv_label.o(i.lv_label_get_letter_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = lv_label_get_letter_on &rArr; get_txt_coords &rArr; lv_obj_get_style_pad_top &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_width
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_align
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[328]"></a>lv_label_get_long_mode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_get_long_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_label_get_long_mode &rArr; lv_obj_get_ext_attr &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[329]"></a>lv_label_get_recolor</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_get_recolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_label_get_recolor &rArr; lv_obj_get_ext_attr &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[345]"></a>lv_label_get_style</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_label.o(i.lv_label_get_style))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
</UL>

<P><STRONG><a name="[32d]"></a>lv_label_get_text</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_get_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_label_get_text &rArr; lv_obj_get_ext_attr &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[331]"></a>lv_label_get_text_sel_end</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_get_text_sel_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_label_get_text_sel_end &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[330]"></a>lv_label_get_text_sel_start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_get_text_sel_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_label_get_text_sel_start &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[33b]"></a>lv_label_refr_text</STRONG> (Thumb, 1464 bytes, Stack size 136 bytes, lv_label.o(i.lv_label_refr_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_speed_to_time
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_var
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_values
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_time
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_repeat_count
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_playback_time
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_exec_cb
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_recolor
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
</UL>

<P><STRONG><a name="[32c]"></a>lv_label_set_align</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_label_set_align &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[326]"></a>lv_label_set_long_mode</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_long_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[32a]"></a>lv_label_set_recolor</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_recolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = lv_label_set_recolor &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[327]"></a>lv_label_set_text</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, lv_label.o(i.lv_label_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[133]"></a>lv_label_set_text_fmt</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, lv_label.o(i.lv_label_set_text_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Swtmr_1s_Callback
</UL>

<P><STRONG><a name="[32e]"></a>lv_label_set_text_static</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_text_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = lv_label_set_text_static &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[1b5]"></a>lv_mem_alloc</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lv_mem.o(i.lv_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ent_get_next
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ent_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_remove_style
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
</UL>

<P><STRONG><a name="[347]"></a>lv_mem_defrag</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lv_mem.o(i.lv_mem_defrag))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_mem_defrag &rArr; ent_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ent_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>

<P><STRONG><a name="[18f]"></a>lv_mem_free</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lv_mem.o(i.lv_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_mem_free &rArr; lv_mem_defrag &rArr; ent_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_defrag
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ent_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_free_all
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_font_clean_up_fmt_txt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_remove_style
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_del
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>

<P><STRONG><a name="[1b9]"></a>lv_mem_realloc</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lv_mem.o(i.lv_mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_get_size
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ent_trunc
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_resize
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[2b8]"></a>lv_obj_add_protect</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_add_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_add_protect &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>

<P><STRONG><a name="[348]"></a>lv_obj_add_state</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_add_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = lv_obj_add_state &rArr; lv_obj_set_state &rArr; style_snapshot &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_value_ofs_y &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
</UL>

<P><STRONG><a name="[34a]"></a>lv_obj_add_style</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_add_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_obj_add_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
</UL>

<P><STRONG><a name="[2b9]"></a>lv_obj_align</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, lv_obj.o(i.lv_obj_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = lv_obj_align &rArr; obj_align_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>

<P><STRONG><a name="[34d]"></a>lv_obj_align_mid</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, lv_obj.o(i.lv_obj_align_mid))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
</UL>

<P><STRONG><a name="[29f]"></a>lv_obj_allocate_ext_attr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_allocate_ext_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_allocate_ext_attr &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[34f]"></a>lv_obj_area_is_visible</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, lv_obj.o(i.lv_obj_area_is_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[22a]"></a>lv_obj_clean_style_list</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_clean_style_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = lv_obj_clean_style_list &rArr; trans_del &rArr; lv_style_remove_prop &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_reset_style_list
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_styles
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_signal
</UL>

<P><STRONG><a name="[2ba]"></a>lv_obj_clear_protect</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_clear_protect))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_clear_protect &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>

<P><STRONG><a name="[351]"></a>lv_obj_clear_state</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_clear_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = lv_obj_clear_state &rArr; lv_obj_set_state &rArr; style_snapshot &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_value_ofs_y &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
</UL>

<P><STRONG><a name="[29c]"></a>lv_obj_create</STRONG> (Thumb, 982 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = lv_obj_create &rArr; lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[2a0]"></a>lv_obj_del</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = lv_obj_del &rArr; obj_del_core &rArr;  obj_del_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[2cb]"></a>lv_obj_get_auto_realign</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_auto_realign))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_auto_realign &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>

<P><STRONG><a name="[24c]"></a>lv_obj_get_base_dir</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_base_dir &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
</UL>

<P><STRONG><a name="[285]"></a>lv_obj_get_child</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_get_child &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
</UL>

<P><STRONG><a name="[27d]"></a>lv_obj_get_coords</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_get_coords &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
</UL>

<P><STRONG><a name="[29e]"></a>lv_obj_get_design_cb</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_design_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_design_cb &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>

<P><STRONG><a name="[2de]"></a>lv_obj_get_disp</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_get_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_load_scr
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[2b0]"></a>lv_obj_get_draw_rect_ext_pad_size</STRONG> (Thumb, 652 bytes, Stack size 104 bytes, lv_obj.o(i.lv_obj_get_draw_rect_ext_pad_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = lv_obj_get_draw_rect_ext_pad_size &rArr; lv_obj_get_style_value_ofs_y &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_str
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_opa
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_ofs_y
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_ofs_x
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_letter_space
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_font
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_align
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_y
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_x
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_align
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_signal
</UL>

<P><STRONG><a name="[24b]"></a>lv_obj_get_ext_attr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_ext_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_ext_attr &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_layout
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_range
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_anim_time
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_type
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_signal
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_style
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim_ready
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_layout
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_fit4
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_auto_size
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_align
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_recolor
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_align
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_recolor
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_long_mode
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_y
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_x
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_dot_tmp
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[36e]"></a>lv_obj_get_focus_parent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_focus_parent))
<BR><BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_focused_obj
</UL>

<P><STRONG><a name="[36d]"></a>lv_obj_get_focused_obj</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_focused_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_get_focused_obj &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_focus_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
</UL>

<P><STRONG><a name="[36f]"></a>lv_obj_get_group</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_group &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
</UL>

<P><STRONG><a name="[24e]"></a>lv_obj_get_height</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_height &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[26e]"></a>lv_obj_get_hidden</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_hidden))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_hidden &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>

<P><STRONG><a name="[1bf]"></a>lv_obj_get_parent</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_focused_obj
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_mid
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>

<P><STRONG><a name="[350]"></a>lv_obj_get_screen</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[29d]"></a>lv_obj_get_signal_cb</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_signal_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_signal_cb &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[1bd]"></a>lv_obj_get_state</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_get_state &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_signal_send
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>

<P><STRONG><a name="[1bb]"></a>lv_obj_get_style_list</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_get_style_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_obj_get_style_list &rArr; lv_signal_send
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_signal_send
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_disable_style_caching
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[24d]"></a>lv_obj_get_width</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_get_width &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_fit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[2c3]"></a>lv_obj_get_width_fit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_width_fit))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_get_width_fit &rArr; lv_obj_get_width &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
</UL>

<P><STRONG><a name="[353]"></a>lv_obj_get_x</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_get_x &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[352]"></a>lv_obj_get_y</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_get_y &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[2af]"></a>lv_obj_handle_get_type_signal</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_handle_get_type_signal))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_signal
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
</UL>

<P><STRONG><a name="[312]"></a>lv_obj_init_draw_img_dsc</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_init_draw_img_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lv_obj_init_draw_img_dsc &rArr; lv_obj_get_style_opa_scale &rArr; _lv_obj_get_style_opa &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_recolor_opa
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_blend_mode
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[313]"></a>lv_obj_init_draw_label_dsc</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_init_draw_label_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lv_obj_init_draw_label_dsc &rArr; lv_obj_get_style_text_font &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_decor
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_blend_mode
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[38e]"></a>lv_obj_init_draw_line_dsc</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, lv_obj.o(i.lv_obj_init_draw_line_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lv_obj_init_draw_line_dsc &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_blend_mode
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[245]"></a>lv_obj_init_draw_rect_dsc</STRONG> (Thumb, 856 bytes, Stack size 40 bytes, lv_obj.o(i.lv_obj_init_draw_rect_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_value_ofs_y &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_str
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_opa
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_ofs_y
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_ofs_x
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_letter_space
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_font
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_blend_mode
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_align
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_y
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_x
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_blend_mode
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_recolor
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_image
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_blend_mode
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_blend_mode
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_blend_mode
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_blend_mode
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[270]"></a>lv_obj_invalidate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_load_scr
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_range
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim_ready
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_fit4
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_align
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_y
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_x
</UL>

<P><STRONG><a name="[31a]"></a>lv_obj_invalidate_area</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_invalidate_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
</UL>

<P><STRONG><a name="[2f8]"></a>lv_obj_is_focused</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_is_focused))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_is_focused &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[31e]"></a>lv_obj_is_point_on_coords</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_is_point_on_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_is_point_on_coords &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
</UL>

<P><STRONG><a name="[2b7]"></a>lv_obj_is_protected</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_is_protected))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_is_protected &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>

<P><STRONG><a name="[390]"></a>lv_obj_move_foreground</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_move_foreground))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_chg_list
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
</UL>

<P><STRONG><a name="[2cc]"></a>lv_obj_realign</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_realign))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_mid
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>

<P><STRONG><a name="[31b]"></a>lv_obj_refresh_ext_draw_pad</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_refresh_ext_draw_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_obj_refresh_ext_draw_pad &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
</UL>

<P><STRONG><a name="[2a9]"></a>lv_obj_refresh_style</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_refresh_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_reset_style_list
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[392]"></a>lv_obj_report_style_mod</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_report_style_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lv_obj_report_style_mod &rArr; report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[2d5]"></a>lv_obj_reset_style_list</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_reset_style_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lv_obj_reset_style_list &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[301]"></a>lv_obj_set_adv_hittest</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_set_adv_hittest))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_adv_hittest &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
</UL>

<P><STRONG><a name="[2a5]"></a>lv_obj_set_click</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_set_click))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_click &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[2a4]"></a>lv_obj_set_design_cb</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_set_design_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_design_cb &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[343]"></a>lv_obj_set_height</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_set_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[2c4]"></a>lv_obj_set_pos</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
</UL>

<P><STRONG><a name="[2a3]"></a>lv_obj_set_signal_cb</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_set_signal_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_obj_set_signal_cb &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[2a6]"></a>lv_obj_set_size</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_base_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[349]"></a>lv_obj_set_state</STRONG> (Thumb, 572 bytes, Stack size 416 bytes, lv_obj.o(i.lv_obj_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = lv_obj_set_state &rArr; style_snapshot &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_value_ofs_y &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_create
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot_compare
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_var
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_values
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_time
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_ready_cb
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_exec_cb
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_set_delay
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
</UL>

<P><STRONG><a name="[7b]"></a>lv_obj_set_x</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_set_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lv_obj_set_x &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(i.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[7c]"></a>lv_obj_set_y</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_set_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(i.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[13f]"></a>lv_port_disp_init</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, lv_port_disp.o(i.lv_port_disp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = lv_port_disp_init &rArr; lv_disp_drv_register &rArr; lv_obj_create &rArr; lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_buf_init
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Init
</UL>

<P><STRONG><a name="[371]"></a>lv_signal_send</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lv_obj.o(i.lv_signal_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_signal_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>

<P><STRONG><a name="[211]"></a>lv_style_copy</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_style.o(i.lv_style_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lv_style_copy &rArr; _lv_style_get_mem_size &rArr; get_style_prop_id &rArr; get_style_prop &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[1d6]"></a>lv_style_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_style.o(i.lv_style_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_style_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
</UL>

<P><STRONG><a name="[2a8]"></a>lv_style_list_copy</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, lv_style.o(i.lv_style_list_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_style_list_copy &rArr; get_alloc_local_style &rArr; _lv_style_list_add_style &rArr; _lv_style_list_remove_style &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>

<P><STRONG><a name="[1d9]"></a>lv_style_list_get_local_style</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_style.o(i.lv_style_list_get_local_style))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
</UL>

<P><STRONG><a name="[2a2]"></a>lv_style_list_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_style.o(i.lv_style_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_style_list_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>

<P><STRONG><a name="[3ad]"></a>lv_style_remove_prop</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lv_style.o(i.lv_style_remove_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lv_style_remove_prop &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_resize
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prop_size
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
</UL>

<P><STRONG><a name="[1da]"></a>lv_style_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_style.o(i.lv_style_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_style_reset &rArr; lv_mem_free &rArr; lv_mem_defrag &rArr; ent_get_next
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[16c]"></a>lv_task_create</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, lv_task.o(i.lv_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lv_task_create &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
</UL>

<P><STRONG><a name="[3c9]"></a>lv_task_del</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_task.o(i.lv_task_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_task_del &rArr; _lv_ll_remove &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
</UL>

<P><STRONG><a name="[1e1]"></a>lv_task_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_task.o(i.lv_task_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_task_core_init
</UL>

<P><STRONG><a name="[3cc]"></a>lv_task_handler</STRONG> (Thumb, 426 bytes, Stack size 32 bytes, lv_task.o(i.lv_task_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_task_handler &rArr; lv_task_exec &rArr; lv_task_del &rArr; _lv_ll_remove &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_time_remaining
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLvglTaskFunction
</UL>

<P><STRONG><a name="[2d6]"></a>lv_task_ready</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_task.o(i.lv_task_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_task_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[181]"></a>lv_task_set_prio</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_task.o(i.lv_task_set_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>

<P><STRONG><a name="[2a7]"></a>lv_theme_apply</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_theme.o(i.lv_theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = lv_theme_apply &rArr; clear_styles &rArr; lv_obj_clean_style_list &rArr; trans_del &rArr; lv_style_remove_prop &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_styles
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[1c7]"></a>lv_theme_get_font_normal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_theme.o(i.lv_theme_get_font_normal))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>

<P><STRONG><a name="[322]"></a>lv_theme_material_init</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, lv_theme_material.o(i.lv_theme_material_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lv_theme_material_init &rArr; lv_obj_report_style_mod &rArr; report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;win_init
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_init
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinner_init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btnmatrix_init
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[323]"></a>lv_theme_set_act</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_theme.o(i.lv_theme_set_act))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[18c]"></a>lv_tick_elaps</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_hal_tick.o(i.lv_tick_elaps))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_tick_elaps
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_time_remaining
</UL>

<P><STRONG><a name="[180]"></a>lv_tick_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_hal_tick.o(i.lv_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_ready
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
</UL>

<P><STRONG><a name="[42e]"></a>lv_tick_inc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_hal_tick.o(i.lv_tick_inc))
<BR><BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>

<P><STRONG><a name="[1e9]"></a>lv_vsnprintf</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, lv_printf.o(i.lv_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lv_vsnprintf &rArr; _vsnprintf &rArr; _ntoa_long_long &rArr; _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
</UL>

<P><STRONG><a name="[54]"></a>main</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = main &rArr; STM32_Init &rArr; lv_port_disp_init &rArr; lv_disp_drv_register &rArr; lv_obj_create &rArr; lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[41a]"></a>pvPortMalloc</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>

<P><STRONG><a name="[43f]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[405]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[3]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[e8]"></a>sFLASH_EraseSector</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32_eval_spi_flash.o(i.sFLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sFLASH_EraseSector &rArr; sFLASH_WriteEnable &rArr; sFLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteEnable
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WaitForWriteEnd
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Test
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SET_AP
</UL>

<P><STRONG><a name="[ea]"></a>sFLASH_ReadBuffer</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32_eval_spi_flash.o(i.sFLASH_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sFLASH_ReadBuffer &rArr; sFLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Test
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_Init
</UL>

<P><STRONG><a name="[e7]"></a>sFLASH_ReadID</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32_eval_spi_flash.o(i.sFLASH_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sFLASH_ReadID &rArr; sFLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Test
</UL>

<P><STRONG><a name="[41f]"></a>sFLASH_SendByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32_eval_spi_flash.o(i.sFLASH_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sFLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadBuffer
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WritePage
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteEnable
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WaitForWriteEnd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_ReadID
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_EraseSector
</UL>

<P><STRONG><a name="[420]"></a>sFLASH_WaitForWriteEnd</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32_eval_spi_flash.o(i.sFLASH_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sFLASH_WaitForWriteEnd &rArr; sFLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WritePage
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_EraseSector
</UL>

<P><STRONG><a name="[e9]"></a>sFLASH_WriteBuffer</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, stm32_eval_spi_flash.o(i.sFLASH_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sFLASH_WriteBuffer &rArr; sFLASH_WritePage &rArr; sFLASH_WriteEnable &rArr; sFLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Test
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SET_AP
</UL>

<P><STRONG><a name="[41e]"></a>sFLASH_WriteEnable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32_eval_spi_flash.o(i.sFLASH_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sFLASH_WriteEnable &rArr; sFLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WritePage
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_EraseSector
</UL>

<P><STRONG><a name="[424]"></a>sFLASH_WritePage</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32_eval_spi_flash.o(i.sFLASH_WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sFLASH_WritePage &rArr; sFLASH_WriteEnable &rArr; sFLASH_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteEnable
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WaitForWriteEnd
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFLASH_WriteBuffer
</UL>

<P><STRONG><a name="[425]"></a>setup_scr_screen</STRONG> (Thumb, 756 bytes, Stack size 24 bytes, setup_scr_screen.o(i.setup_scr_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = setup_scr_screen &rArr; lv_label_create &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_range
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_anim_time
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_align
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_dir
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_color
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLvglTaskFunction
</UL>

<P><STRONG><a name="[427]"></a>setup_scr_screen_1</STRONG> (Thumb, 7296 bytes, Stack size 16 bytes, setup_scr_screen_1.o(i.setup_scr_screen_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = setup_scr_screen_1 &rArr; lv_label_create &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_layout
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_align
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_letter_space
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_image_recolor_opa
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_image_recolor
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_image_opa
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_opa
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_dir
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_color
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_fit
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLvglTaskFunction
</UL>

<P><STRONG><a name="[3ec]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[3f3]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[439]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.uxTaskResetEventItemValue))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[437]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[42d]"></a>vApplicationTickHook</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.vApplicationTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[3f9]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[404]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[3f5]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[3f4]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>

<P><STRONG><a name="[8c]"></a>vLvglTaskFunction</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(i.vLvglTaskFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = vLvglTaskFunction &rArr; setup_scr_screen &rArr; lv_label_create &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[145]"></a>vPortEnterCritical</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[146]"></a>vPortExitCritical</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[400]"></a>vPortFree</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[43a]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[3fa]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[414]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[d7]"></a>vTaskDelay</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Time
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mqtt_Cloud_Connect
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLvglTaskFunction
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Task
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SU_03T_TASK
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_Task
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KQM6600_Task
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Task
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cloud_Task
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SET_AP
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_CheckAck
</UL>

<P><STRONG><a name="[42f]"></a>vTaskDelayUntil</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tasks.o(i.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLvglTaskFunction
</UL>

<P><STRONG><a name="[43c]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[419]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[431]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[430]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[432]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[433]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[434]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[3e6]"></a>vTaskStartScheduler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[412]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[94]"></a>vTaskSwitchContext</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[110]"></a>writeCString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqttpacket.o(i.writeCString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
</UL>

<P><STRONG><a name="[10e]"></a>writeChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqttpacket.o(i.writeChar))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>

<P><STRONG><a name="[111]"></a>writeInt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mqttpacket.o(i.writeInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
</UL>

<P><STRONG><a name="[112]"></a>writeMQTTString</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mqttpacket.o(i.writeMQTTString))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[3e3]"></a>xEventGroupCreate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, event_groups.o(i.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>xEventGroupSetBits</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, event_groups.o(i.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Task
</UL>

<P><STRONG><a name="[109]"></a>xEventGroupWaitBits</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, event_groups.o(i.xEventGroupWaitBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED4_Task
</UL>

<P><STRONG><a name="[436]"></a>xPortStartScheduler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[3e1]"></a>xQueueGenericCreate</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[402]"></a>xQueueGenericReset</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[3e2]"></a>xQueueGenericSend</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43e]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[15a]"></a>xQueueGiveFromISR</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGiveFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[410]"></a>xQueueReceive</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[f4]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KQM6600_Task
</UL>

<P><STRONG><a name="[43d]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[3e5]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[443]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[415]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLvglTaskFunction
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[149]"></a>xTaskIncrementTick</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3ff]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[440]"></a>xTaskPriorityInherit</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[40b]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[413]"></a>xTaskResumeAll</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[3e4]"></a>xTimerCreate</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = xTimerCreate &rArr; prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[435]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[40d]"></a>xTimerGenericCommand</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLvglTaskFunction
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[147]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[148]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[ec]"></a>lv_scr_load</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.lv_scr_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lv_scr_load &rArr; lv_disp_load_scr &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_load_scr
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLvglTaskFunction
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Task
</UL>

<P><STRONG><a name="[21c]"></a>buffer_skip_whitespace</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, cjson.o(i.buffer_skip_whitespace))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[218]"></a>cJSON_New_Item</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cjson.o(i.cJSON_New_Item))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cJSON_New_Item &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[222]"></a>case_insensitive_strcmp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cjson.o(i.case_insensitive_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>

<P><STRONG><a name="[3eb]"></a>get_decimal_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cjson.o(i.get_decimal_point))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[217]"></a>get_object_item</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, cjson.o(i.get_object_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_object_item &rArr; case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;case_insensitive_strcmp
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
</UL>

<P><STRONG><a name="[3e9]"></a>parse_array</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, cjson.o(i.parse_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = parse_array &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[42c]"></a>parse_hex4</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, cjson.o(i.parse_hex4))
<BR><BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>

<P><STRONG><a name="[3ea]"></a>parse_number</STRONG> (Thumb, 298 bytes, Stack size 96 bytes, cjson.o(i.parse_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decimal_point
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[3ee]"></a>parse_object</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, cjson.o(i.parse_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + In Cycle
<LI>Call Chain = parse_object &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[3ef]"></a>parse_string</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, cjson.o(i.parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = parse_string &rArr; utf16_literal_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[21d]"></a>parse_value</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, cjson.o(i.parse_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = parse_value &rArr; parse_number &rArr; strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[21b]"></a>skip_utf8_bom</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cjson.o(i.skip_utf8_bom))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = skip_utf8_bom &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithLengthOpts
</UL>

<P><STRONG><a name="[3f0]"></a>utf16_literal_to_utf8</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, cjson.o(i.utf16_literal_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = utf16_literal_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
</UL>

<P><STRONG><a name="[438]"></a>prvTestWaitCondition</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, event_groups.o(i.prvTestWaitCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTestWaitCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[3fd]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[3fe]"></a>prvCopyDataToQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[441]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(i.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[401]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[408]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[409]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[40a]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, queue.o(i.prvNotifyQueueSetContainer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[418]"></a>prvUnlockQueue</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[3f2]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[3f6]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[3fb]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[3fc]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[8f]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[403]"></a>prvInitialiseNewTask</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[3f7]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[442]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[3f8]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[417]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[406]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, timers.o(i.prvInitialiseNewTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prvInitialiseNewTimer &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[407]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[40c]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[40e]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[411]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[40f]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[416]"></a>prvSwitchTimerLists</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[90]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[41b]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[41c]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[8e]"></a>prvTaskExitError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[82]"></a>disp_flush</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lv_port_disp.o(i.disp_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disp_flush &rArr; LCD_Color_Fill &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_flush_ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_disp.o(i.lv_port_disp_init)
</UL>
<P><STRONG><a name="[236]"></a>disp_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_port_disp.o(i.disp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = disp_init &rArr; LCD_Init &rArr; LCD_Config &rArr; LCD_SSD_BackLightSet &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[26d]"></a>focus_next_core</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, lv_group.o(i.focus_next_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
</UL>

<P><STRONG><a name="[2f9]"></a>lv_group_refocus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_refocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[271]"></a>obj_to_foreground</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_group.o(i.obj_to_foreground))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>

<P><STRONG><a name="[299]"></a>_lv_memcpy_small</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lv_obj.o(i._lv_memcpy_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[283]"></a>invalidate_style_cache</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lv_obj.o(i.invalidate_style_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_prop_is_cacheble
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>

<P><STRONG><a name="[39d]"></a>lv_anim_set_delay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_anim_set_delay))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[399]"></a>lv_anim_set_exec_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_anim_set_exec_cb))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[39a]"></a>lv_anim_set_ready_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_anim_set_ready_cb))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[39c]"></a>lv_anim_set_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_anim_set_time))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[39b]"></a>lv_anim_set_values</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj.o(i.lv_anim_set_values))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[398]"></a>lv_anim_set_var</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_anim_set_var))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[298]"></a>lv_area_copy</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_area_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_area_copy &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[370]"></a>lv_area_get_height</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
</UL>

<P><STRONG><a name="[38d]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
</UL>

<P><STRONG><a name="[321]"></a>lv_color_hex</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, lv_obj.o(i.lv_color_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[42b]"></a>lv_color_mix</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, lv_obj.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
</UL>

<P><STRONG><a name="[3e7]"></a>lv_event_mark_deleted</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_obj.o(i.lv_event_mark_deleted))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[7e]"></a>lv_obj_design</STRONG> (Thumb, 640 bytes, Stack size 136 bytes, lv_obj.o(i.lv_obj_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = lv_obj_design &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_blend_mode
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_blend_mode
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_create)
</UL>
<P><STRONG><a name="[35a]"></a>lv_obj_get_style_bg_blend_mode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_bg_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_bg_blend_mode &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[359]"></a>lv_obj_get_style_bg_opa</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_bg_opa &rArr; _lv_obj_get_style_opa &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[35b]"></a>lv_obj_get_style_border_blend_mode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_border_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_border_blend_mode &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[35d]"></a>lv_obj_get_style_border_post</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_border_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_border_post &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[372]"></a>lv_obj_get_style_border_side</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_border_side &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[373]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_border_width &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[355]"></a>lv_obj_get_style_clip_corner</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_clip_corner &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[374]"></a>lv_obj_get_style_image_blend_mode</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_image_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_image_blend_mode &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
</UL>

<P><STRONG><a name="[375]"></a>lv_obj_get_style_image_recolor_opa</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_image_recolor_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_image_recolor_opa &rArr; _lv_obj_get_style_opa &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
</UL>

<P><STRONG><a name="[376]"></a>lv_obj_get_style_line_blend_mode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_line_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_line_blend_mode &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
</UL>

<P><STRONG><a name="[377]"></a>lv_obj_get_style_margin_bottom</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_margin_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_margin_bottom &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[378]"></a>lv_obj_get_style_margin_left</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_margin_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_margin_left &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[379]"></a>lv_obj_get_style_margin_right</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_margin_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_margin_right &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[37a]"></a>lv_obj_get_style_margin_top</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_margin_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_margin_top &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[35c]"></a>lv_obj_get_style_opa_scale</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_opa_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_opa_scale &rArr; _lv_obj_get_style_opa &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
</UL>

<P><STRONG><a name="[37b]"></a>lv_obj_get_style_outline_blend_mode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_outline_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_outline_blend_mode &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[36b]"></a>lv_obj_get_style_outline_opa</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_outline_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_outline_opa &rArr; _lv_obj_get_style_opa &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[36c]"></a>lv_obj_get_style_outline_pad</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_outline_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_outline_pad &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[36a]"></a>lv_obj_get_style_outline_width</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_outline_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_outline_width &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[37c]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[37d]"></a>lv_obj_get_style_pad_inner</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_pad_inner))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_pad_inner &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[37e]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_pad_left &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_fit
</UL>

<P><STRONG><a name="[37f]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_pad_right &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_fit
</UL>

<P><STRONG><a name="[380]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_pad_top &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[381]"></a>lv_obj_get_style_pattern_blend_mode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_pattern_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_pattern_blend_mode &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[382]"></a>lv_obj_get_style_pattern_image</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_pattern_image))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_pattern_image &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[383]"></a>lv_obj_get_style_pattern_recolor</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_pattern_recolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_pattern_recolor &rArr; _lv_obj_get_style_color &rArr; lv_obj_get_state &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[356]"></a>lv_obj_get_style_radius</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_radius &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[384]"></a>lv_obj_get_style_shadow_blend_mode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_shadow_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_shadow_blend_mode &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[361]"></a>lv_obj_get_style_shadow_ofs_x</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_shadow_ofs_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_shadow_ofs_x &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[362]"></a>lv_obj_get_style_shadow_ofs_y</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_shadow_ofs_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_shadow_ofs_y &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[35f]"></a>lv_obj_get_style_shadow_opa</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_shadow_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_shadow_opa &rArr; _lv_obj_get_style_opa &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[360]"></a>lv_obj_get_style_shadow_spread</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_shadow_spread))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_shadow_spread &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[35e]"></a>lv_obj_get_style_shadow_width</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_shadow_width &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[385]"></a>lv_obj_get_style_text_blend_mode</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_text_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_text_blend_mode &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[386]"></a>lv_obj_get_style_text_decor</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_text_decor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_text_decor &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[387]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_text_font &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[388]"></a>lv_obj_get_style_text_letter_space</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_text_letter_space &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[389]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_text_line_space &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
</UL>

<P><STRONG><a name="[38a]"></a>lv_obj_get_style_transform_angle</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_transform_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_transform_angle &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[358]"></a>lv_obj_get_style_transform_height</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_transform_height &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[357]"></a>lv_obj_get_style_transform_width</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_transform_width &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[38b]"></a>lv_obj_get_style_transform_zoom</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_transform_zoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_transform_zoom &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[367]"></a>lv_obj_get_style_value_align</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_value_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_value_align &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[38c]"></a>lv_obj_get_style_value_blend_mode</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_value_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_get_style_value_blend_mode &rArr;  _lv_obj_get_style_int (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[366]"></a>lv_obj_get_style_value_font</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_value_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_value_font &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[365]"></a>lv_obj_get_style_value_letter_space</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_value_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_value_letter_space &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[368]"></a>lv_obj_get_style_value_ofs_x</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_value_ofs_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_value_ofs_x &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[369]"></a>lv_obj_get_style_value_ofs_y</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_value_ofs_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_value_ofs_y &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[364]"></a>lv_obj_get_style_value_opa</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_value_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_value_opa &rArr; _lv_obj_get_style_opa &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[363]"></a>lv_obj_get_style_value_str</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_get_style_value_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[7d]"></a>lv_obj_signal</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = lv_obj_signal &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; style_snapshot &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_value_ofs_y &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_focused_obj
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_pad
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_handle_get_type_signal
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_create)
</UL>
<P><STRONG><a name="[34c]"></a>obj_align_core</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, lv_obj.o(i.obj_align_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = obj_align_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_align
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>

<P><STRONG><a name="[34e]"></a>obj_align_mid_core</STRONG> (Thumb, 706 bytes, Stack size 72 bytes, lv_obj.o(i.obj_align_mid_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_mid
</UL>

<P><STRONG><a name="[354]"></a>obj_del_core</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, lv_obj.o(i.obj_del_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + In Cycle
<LI>Call Chain = obj_del_core &rArr;  obj_del_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_obj_act
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_mark_deleted
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[394]"></a>refresh_children_position</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lv_obj.o(i.refresh_children_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = refresh_children_position &rArr;  refresh_children_position (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
</UL>

<P><STRONG><a name="[391]"></a>refresh_children_style</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_obj.o(i.refresh_children_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + In Cycle
<LI>Call Chain = refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>

<P><STRONG><a name="[393]"></a>report_style_mod_core</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lv_obj.o(i.report_style_mod_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + In Cycle
<LI>Call Chain = report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
</UL>

<P><STRONG><a name="[284]"></a>style_prop_is_cacheble</STRONG> (Thumb, 272 bytes, Stack size 0 bytes, lv_obj.o(i.style_prop_is_cacheble))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
</UL>

<P><STRONG><a name="[395]"></a>style_snapshot</STRONG> (Thumb, 468 bytes, Stack size 32 bytes, lv_obj.o(i.style_snapshot))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = style_snapshot &rArr; lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_value_ofs_y &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_inner
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_disable_style_caching
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[396]"></a>style_snapshot_compare</STRONG> (Thumb, 402 bytes, Stack size 16 bytes, lv_obj.o(i.style_snapshot_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = style_snapshot_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[7f]"></a>trans_anim_cb</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, lv_obj.o(i.trans_anim_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = trans_anim_cb &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_set_state)
</UL>
<P><STRONG><a name="[81]"></a>trans_anim_ready_cb</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lv_obj.o(i.trans_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = trans_anim_ready_cb &rArr; lv_style_remove_prop &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_set_state)
</UL>
<P><STRONG><a name="[80]"></a>trans_anim_start_cb</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lv_obj.o(i.trans_anim_start_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = trans_anim_start_cb &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(i.lv_obj_set_state)
</UL>
<P><STRONG><a name="[397]"></a>trans_create</STRONG> (Thumb, 864 bytes, Stack size 72 bytes, lv_obj.o(i.trans_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = trans_create &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[34b]"></a>trans_del</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, lv_obj.o(i.trans_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = trans_del &rArr; lv_style_remove_prop &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
</UL>

<P><STRONG><a name="[1c1]"></a>update_style_cache</STRONG> (Thumb, 760 bytes, Stack size 32 bytes, lv_obj.o(i.update_style_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_prop_is_cacheble
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_str
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_value_blend_mode
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_decor
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_blend_mode
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_blend_mode
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_image
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pattern_blend_mode
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_blend_mode
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_blend_mode
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_recolor_opa
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_blend_mode
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_side
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_blend_mode
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_blend_mode
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>

<P><STRONG><a name="[286]"></a>update_style_cache_children</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, lv_obj.o(i.update_style_cache_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + In Cycle
<LI>Call Chain = update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_decor
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_scale
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_image_recolor_opa
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_font_normal
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
</UL>

<P><STRONG><a name="[1af]"></a>lv_area_copy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, lv_refr.o(i.lv_area_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
</UL>

<P><STRONG><a name="[3a1]"></a>lv_area_get_height</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_refr.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_rotate_180
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_rotate
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>

<P><STRONG><a name="[188]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_refr.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_rotate_180
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_rotate
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>

<P><STRONG><a name="[39f]"></a>lv_refr_area</STRONG> (Thumb, 412 bytes, Stack size 48 bytes, lv_refr.o(i.lv_refr_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = lv_refr_area &rArr; lv_refr_area_part &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_areas
</UL>

<P><STRONG><a name="[3a0]"></a>lv_refr_area_part</STRONG> (Thumb, 350 bytes, Stack size 120 bytes, lv_refr.o(i.lv_refr_area_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = lv_refr_area_part &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_double_buf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>

<P><STRONG><a name="[183]"></a>lv_refr_areas</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, lv_refr.o(i.lv_refr_areas))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = lv_refr_areas &rArr; lv_refr_area &rArr; lv_refr_area_part &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[3a2]"></a>lv_refr_get_top_obj</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lv_refr.o(i.lv_refr_get_top_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + In Cycle
<LI>Call Chain = lv_refr_get_top_obj &rArr;  lv_refr_get_top_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[182]"></a>lv_refr_join_area</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, lv_refr.o(i.lv_refr_join_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_refr_join_area &rArr; lv_area_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_join
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_on
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[3a7]"></a>lv_refr_obj</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, lv_refr.o(i.lv_refr_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + In Cycle
<LI>Call Chain = lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>

<P><STRONG><a name="[3a4]"></a>lv_refr_obj_and_children</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lv_refr.o(i.lv_refr_obj_and_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lv_refr_obj_and_children &rArr; lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[185]"></a>lv_refr_vdb_flush</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, lv_refr.o(i.lv_refr_vdb_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_refr_vdb_flush &rArr; lv_refr_vdb_rotate &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_double_buf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[3a8]"></a>lv_refr_vdb_rotate</STRONG> (Thumb, 512 bytes, Stack size 56 bytes, lv_refr.o(i.lv_refr_vdb_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_refr_vdb_rotate &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_rotate_90_sqr
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_rotate_90
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_rotate_180
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
</UL>

<P><STRONG><a name="[3a9]"></a>lv_refr_vdb_rotate_180</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, lv_refr.o(i.lv_refr_vdb_rotate_180))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_refr_vdb_rotate_180
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_rotate
</UL>

<P><STRONG><a name="[3ab]"></a>lv_refr_vdb_rotate_90</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, lv_refr.o(i.lv_refr_vdb_rotate_90))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_refr_vdb_rotate_90
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_rotate
</UL>

<P><STRONG><a name="[3aa]"></a>lv_refr_vdb_rotate_90_sqr</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, lv_refr.o(i.lv_refr_vdb_rotate_90_sqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_refr_vdb_rotate_90_sqr &rArr; lv_vdb_rotate4
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vdb_rotate4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_rotate
</UL>

<P><STRONG><a name="[3ac]"></a>lv_vdb_rotate4</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, lv_refr.o(i.lv_vdb_rotate4))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_vdb_rotate4
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_rotate_90_sqr
</UL>

<P><STRONG><a name="[1ca]"></a>_lv_memcpy_small</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lv_style.o(i._lv_memcpy_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_ptr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_opa
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_int
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_color
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>

<P><STRONG><a name="[276]"></a>get_alloc_local_style</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_style.o(i.get_alloc_local_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = get_alloc_local_style &rArr; _lv_style_list_add_style &rArr; _lv_style_list_remove_style &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_get_style
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
</UL>

<P><STRONG><a name="[1ce]"></a>get_next_prop_index</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_style.o(i.get_next_prop_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_next_prop_index
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prop_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
</UL>

<P><STRONG><a name="[27a]"></a>get_prop_size</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_style.o(i.get_prop_size))
<BR><BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_prop_index
</UL>

<P><STRONG><a name="[1c9]"></a>get_property_index</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, lv_style.o(i.get_property_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = get_property_index &rArr; get_style_prop_id &rArr; get_style_prop &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_id
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_prop_index
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_ptr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_opa
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_int
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_color
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>

<P><STRONG><a name="[27b]"></a>get_style_prop</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_style.o(i.get_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_style_prop &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_id
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop_attr
</UL>

<P><STRONG><a name="[1cb]"></a>get_style_prop_attr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_style.o(i.get_style_prop_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_style_prop_attr &rArr; get_style_prop &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_ptr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_opa
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_int
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_color
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>

<P><STRONG><a name="[1cf]"></a>get_style_prop_id</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_style.o(i.get_style_prop_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_style_prop_id &rArr; get_style_prop &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_property_index
</UL>

<P><STRONG><a name="[1d7]"></a>lv_style_list_get_style</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lv_style.o(i.lv_style_list_get_style))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_ptr
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_opa
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_int
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_color
</UL>

<P><STRONG><a name="[1dc]"></a>style_resize</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lv_style.o(i.style_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>

<P><STRONG><a name="[64]"></a>color_blend_true_color_additive</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, lv_draw_blend.o(i.color_blend_true_color_additive))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = color_blend_true_color_additive &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_draw_blend.o(i.fill_blended)
<LI> lv_draw_blend.o(i.map_blended)
</UL>
<P><STRONG><a name="[65]"></a>color_blend_true_color_subtractive</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, lv_draw_blend.o(i.color_blend_true_color_subtractive))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = color_blend_true_color_subtractive &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_draw_blend.o(i.fill_blended)
<LI> lv_draw_blend.o(i.map_blended)
</UL>
<P><STRONG><a name="[17b]"></a>fill_blended</STRONG> (Thumb, 348 bytes, Stack size 80 bytes, lv_draw_blend.o(i.fill_blended))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = fill_blended &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
</UL>

<P><STRONG><a name="[17a]"></a>fill_normal</STRONG> (Thumb, 922 bytes, Stack size 88 bytes, lv_draw_blend.o(i.fill_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fill_normal &rArr; lv_color_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_fill
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix_premult
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
</UL>

<P><STRONG><a name="[179]"></a>fill_set_px</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, lv_draw_blend.o(i.fill_set_px))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fill_set_px
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
</UL>

<P><STRONG><a name="[26a]"></a>lv_area_get_height</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_blend.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
</UL>

<P><STRONG><a name="[178]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_blend.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_set_px
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_blended
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_set_px
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_blended
</UL>

<P><STRONG><a name="[22b]"></a>lv_color_mix</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, lv_draw_blend.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_blended
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_blend_true_color_subtractive
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_blend_true_color_additive
</UL>

<P><STRONG><a name="[26c]"></a>lv_color_mix_premult</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, lv_draw_blend.o(i.lv_color_mix_premult))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix_premult
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
</UL>

<P><STRONG><a name="[17f]"></a>map_blended</STRONG> (Thumb, 368 bytes, Stack size 80 bytes, lv_draw_blend.o(i.map_blended))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = map_blended
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
</UL>

<P><STRONG><a name="[17e]"></a>map_normal</STRONG> (Thumb, 936 bytes, Stack size 80 bytes, lv_draw_blend.o(i.map_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = map_normal &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
</UL>

<P><STRONG><a name="[17d]"></a>map_set_px</STRONG> (Thumb, 284 bytes, Stack size 80 bytes, lv_draw_blend.o(i.map_set_px))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = map_set_px
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
</UL>

<P><STRONG><a name="[194]"></a>_lv_img_buf_transform</STRONG> (Thumb, 458 bytes, Stack size 72 bytes, lv_draw_img.o(i._lv_img_buf_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = _lv_img_buf_transform &rArr; _lv_img_buf_transform_anti_alias &rArr; lv_img_buf_get_px_color &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_alpha
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[195]"></a>_lv_memcpy_small</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lv_draw_img.o(i._lv_memcpy_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>

<P><STRONG><a name="[315]"></a>draw_cleanup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_draw_img.o(i.draw_cleanup))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[29a]"></a>lv_area_copy</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_draw_img.o(i.lv_area_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_area_copy &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[2e9]"></a>lv_area_get_height</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[2e8]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[2ea]"></a>lv_color_mix_premult</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, lv_draw_img.o(i.lv_color_mix_premult))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix_premult
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[2e7]"></a>lv_draw_map</STRONG> (Thumb, 1434 bytes, Stack size 248 bytes, lv_draw_img.o(i.lv_draw_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lv_draw_map &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix_premult
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[2e0]"></a>lv_img_draw_core</STRONG> (Thumb, 496 bytes, Stack size 104 bytes, lv_draw_img.o(i.lv_img_draw_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_read_line
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_is_chroma_keyed
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_has_alpha
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_cleanup
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[2df]"></a>show_error</STRONG> (Thumb, 66 bytes, Stack size 144 bytes, lv_draw_img.o(i.show_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[254]"></a>draw_letter_normal</STRONG> (Thumb, 786 bytes, Stack size 152 bytes, lv_draw_label.o(i.draw_letter_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = draw_letter_normal &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[256]"></a>draw_letter_subpx</STRONG> (Thumb, 1132 bytes, Stack size 176 bytes, lv_draw_label.o(i.draw_letter_subpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = draw_letter_subpx &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[2e2]"></a>hex_char_to_num</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, lv_draw_label.o(i.hex_char_to_num))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[255]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_label.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[2e3]"></a>lv_draw_letter</STRONG> (Thumb, 254 bytes, Stack size 80 bytes, lv_draw_label.o(i.lv_draw_letter))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = lv_draw_letter &rArr; draw_letter_subpx &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_bitmap
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_subpx
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[257]"></a>draw_line_hor</STRONG> (Thumb, 608 bytes, Stack size 128 bytes, lv_draw_line.o(i.draw_line_hor))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = draw_line_hor &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
</UL>

<P><STRONG><a name="[259]"></a>draw_line_skew</STRONG> (Thumb, 1228 bytes, Stack size 336 bytes, lv_draw_line.o(i.draw_line_skew))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = draw_line_skew &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
</UL>

<P><STRONG><a name="[25c]"></a>draw_line_ver</STRONG> (Thumb, 580 bytes, Stack size 120 bytes, lv_draw_line.o(i.draw_line_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = draw_line_ver &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
</UL>

<P><STRONG><a name="[258]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_line.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
</UL>

<P><STRONG><a name="[28c]"></a>line_mask_flat</STRONG> (Thumb, 482 bytes, Stack size 56 bytes, lv_draw_mask.o(i.line_mask_flat))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = line_mask_flat &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
</UL>

<P><STRONG><a name="[28e]"></a>line_mask_steep</STRONG> (Thumb, 676 bytes, Stack size 80 bytes, lv_draw_mask.o(i.line_mask_steep))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = line_mask_steep &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
</UL>

<P><STRONG><a name="[2eb]"></a>lv_area_copy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, lv_draw_mask.o(i.lv_area_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
</UL>

<P><STRONG><a name="[2ed]"></a>lv_area_get_height</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_mask.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
</UL>

<P><STRONG><a name="[2ec]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_mask.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
</UL>

<P><STRONG><a name="[6f]"></a>lv_draw_mask_line</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, lv_draw_mask.o(i.lv_draw_mask_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lv_draw_mask_line &rArr; line_mask_steep &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_steep
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_flat
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(i.lv_draw_mask_line_points_init)
</UL>
<P><STRONG><a name="[70]"></a>lv_draw_mask_radius</STRONG> (Thumb, 1392 bytes, Stack size 120 bytes, lv_draw_mask.o(i.lv_draw_mask_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_draw_mask_radius &rArr; lv_area_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_sqrt
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(i.lv_draw_mask_radius_init)
</UL>
<P><STRONG><a name="[28d]"></a>mask_mix</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_draw_mask.o(i.mask_mix))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_steep
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_flat
</UL>

<P><STRONG><a name="[237]"></a>draw_bg</STRONG> (Thumb, 1330 bytes, Stack size 184 bytes, lv_draw_rect.o(i.draw_bg))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = draw_bg &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grad_get
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[247]"></a>draw_border</STRONG> (Thumb, 828 bytes, Stack size 208 bytes, lv_draw_rect.o(i.draw_border))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[248]"></a>draw_full_border</STRONG> (Thumb, 1218 bytes, Stack size 216 bytes, lv_draw_rect.o(i.draw_full_border))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_outline
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
</UL>

<P><STRONG><a name="[25d]"></a>draw_outline</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, lv_draw_rect.o(i.draw_outline))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = draw_outline &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[25e]"></a>draw_pattern</STRONG> (Thumb, 684 bytes, Stack size 152 bytes, lv_draw_rect.o(i.draw_pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + In Cycle
<LI>Call Chain = draw_pattern &rArr;  lv_draw_label (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[265]"></a>draw_shadow</STRONG> (Thumb, 3882 bytes, Stack size 216 bytes, lv_draw_rect.o(i.draw_shadow))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = draw_shadow &rArr; shadow_draw_corner_buf &rArr; shadow_blur_corner &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[267]"></a>draw_value_str</STRONG> (Thumb, 244 bytes, Stack size 88 bytes, lv_draw_rect.o(i.draw_value_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + In Cycle
<LI>Call Chain = draw_value_str &rArr;  lv_draw_label (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_align
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[23e]"></a>grad_get</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, lv_draw_rect.o(i.grad_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = grad_get &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[238]"></a>lv_area_copy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, lv_draw_rect.o(i.lv_area_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_outline
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[23b]"></a>lv_area_get_height</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_rect.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[239]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_rect.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_pattern
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[282]"></a>lv_color_mix</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, lv_draw_rect.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grad_get
</UL>

<P><STRONG><a name="[429]"></a>shadow_blur_corner</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, lv_draw_rect.o(i.shadow_blur_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = shadow_blur_corner &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
</UL>

<P><STRONG><a name="[266]"></a>shadow_draw_corner_buf</STRONG> (Thumb, 452 bytes, Stack size 104 bytes, lv_draw_rect.o(i.shadow_draw_corner_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = shadow_draw_corner_buf &rArr; shadow_blur_corner &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
</UL>

<P><STRONG><a name="[199]"></a>_lv_memcpy_small</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lv_img_buf.o(i._lv_memcpy_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
</UL>

<P><STRONG><a name="[19a]"></a>lv_color_mix</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, lv_img_buf.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
</UL>

<P><STRONG><a name="[19f]"></a>lv_img_cache_match</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_img_cache.o(i.lv_img_cache_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_img_cache_match &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
</UL>

<P><STRONG><a name="[308]"></a>lv_color_make</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, lv_img_decoder.o(i.lv_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[304]"></a>lv_img_decoder_built_in_line_alpha</STRONG> (Thumb, 440 bytes, Stack size 104 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_line_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = lv_img_decoder_built_in_line_alpha &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
</UL>

<P><STRONG><a name="[306]"></a>lv_img_decoder_built_in_line_indexed</STRONG> (Thumb, 402 bytes, Stack size 72 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_line_indexed))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = lv_img_decoder_built_in_line_indexed &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
</UL>

<P><STRONG><a name="[307]"></a>lv_img_decoder_built_in_line_true_color</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_line_true_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_img_decoder_built_in_line_true_color &rArr; lv_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
</UL>

<P><STRONG><a name="[233]"></a>bits_write</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, lv_font_fmt_txt.o(i.bits_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bits_write
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress
</UL>

<P><STRONG><a name="[231]"></a>decompress</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, lv_font_fmt_txt.o(i.decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = decompress &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress_line
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits_write
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[232]"></a>decompress_line</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_font_fmt_txt.o(i.decompress_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = decompress_line &rArr; rle_next &rArr; get_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rle_next
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress
</UL>

<P><STRONG><a name="[41d]"></a>get_bits</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, lv_font_fmt_txt.o(i.get_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rle_next
</UL>

<P><STRONG><a name="[277]"></a>get_glyph_dsc_id</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, lv_font_fmt_txt.o(i.get_glyph_dsc_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[279]"></a>get_kern_value</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, lv_font_fmt_txt.o(i.get_kern_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_kern_value &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
</UL>

<P><STRONG><a name="[68]"></a>kern_pair_16_compare</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, lv_font_fmt_txt.o(i.kern_pair_16_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = kern_pair_16_compare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.get_kern_value)
</UL>
<P><STRONG><a name="[67]"></a>kern_pair_8_compare</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, lv_font_fmt_txt.o(i.kern_pair_8_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = kern_pair_8_compare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.get_kern_value)
</UL>
<P><STRONG><a name="[234]"></a>rle_next</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, lv_font_fmt_txt.o(i.rle_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rle_next &rArr; get_bits
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress_line
</UL>

<P><STRONG><a name="[66]"></a>unicode_list_compare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i.unicode_list_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.get_glyph_dsc_id)
</UL>
<P><STRONG><a name="[16d]"></a>anim_mark_list_change</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_anim.o(i.anim_mark_list_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
</UL>

<P><STRONG><a name="[1f2]"></a>anim_ready_handler</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, lv_anim.o(i.anim_ready_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = anim_ready_handler &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
</UL>

<P><STRONG><a name="[5c]"></a>anim_task</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, lv_anim.o(i.anim_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = anim_task &rArr; anim_ready_handler &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_linear
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_anim.o(i._lv_anim_core_init)
</UL>
<P><STRONG><a name="[170]"></a>lv_area_get_height</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_align
</UL>

<P><STRONG><a name="[16f]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_align
</UL>

<P><STRONG><a name="[173]"></a>lv_point_within_circle</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lv_area.o(i.lv_point_within_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_point_within_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>

<P><STRONG><a name="[2b1]"></a>lv_color_mix</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, lv_color.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_lighten
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
</UL>

<P><STRONG><a name="[2f6]"></a>lv_fs_get_real_path</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_fs.o(i.lv_fs_get_real_path))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
</UL>

<P><STRONG><a name="[1b3]"></a>node_set_next</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lv_ll.o(i.node_set_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_chg_list
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
</UL>

<P><STRONG><a name="[1b2]"></a>node_set_prev</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, lv_ll.o(i.node_set_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = node_set_prev
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_chg_list
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
</UL>

<P><STRONG><a name="[268]"></a>ent_alloc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_mem.o(i.ent_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ent_trunc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>

<P><STRONG><a name="[346]"></a>ent_get_next</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_mem.o(i.ent_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ent_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_defrag
</UL>

<P><STRONG><a name="[269]"></a>ent_trunc</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, lv_mem.o(i.ent_trunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ent_trunc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ent_alloc
</UL>

<P><STRONG><a name="[166]"></a>_atoi</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_printf.o(i._atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[167]"></a>_is_digit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_printf.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atoi
</UL>

<P><STRONG><a name="[1ea]"></a>_ntoa_format</STRONG> (Thumb, 282 bytes, Stack size 72 bytes, lv_printf.o(i._ntoa_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long
</UL>

<P><STRONG><a name="[1ec]"></a>_ntoa_long</STRONG> (Thumb, 124 bytes, Stack size 112 bytes, lv_printf.o(i._ntoa_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _ntoa_long &rArr; _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[1ed]"></a>_ntoa_long_long</STRONG> (Thumb, 184 bytes, Stack size 112 bytes, lv_printf.o(i._ntoa_long_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _ntoa_long_long &rArr; _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[84]"></a>_out_buffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_printf.o(i._out_buffer))
<BR>[Address Reference Count : 1]<UL><LI> lv_printf.o(i.lv_vsnprintf)
</UL>
<P><STRONG><a name="[61]"></a>_out_null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_printf.o(i._out_null))
<BR>[Address Reference Count : 1]<UL><LI> lv_printf.o(i._vsnprintf)
</UL>
<P><STRONG><a name="[1eb]"></a>_out_rev</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, lv_printf.o(i._out_rev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _out_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
</UL>

<P><STRONG><a name="[1f1]"></a>_vsnprintf</STRONG> (Thumb, 1498 bytes, Stack size 96 bytes, lv_printf.o(i._vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _vsnprintf &rArr; _ntoa_long_long &rArr; _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vsnprintf
</UL>

<P><STRONG><a name="[3ca]"></a>lv_task_exec</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_task.o(i.lv_task_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_task_exec &rArr; lv_task_del &rArr; _lv_ll_remove &rArr; node_set_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_del
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_time_remaining
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
</UL>

<P><STRONG><a name="[3cb]"></a>lv_task_time_remaining</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_task.o(i.lv_task_time_remaining))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_task_time_remaining &rArr; lv_tick_elaps
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
</UL>

<P><STRONG><a name="[3e0]"></a>_lv_memcpy_small</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lv_txt.o(i._lv_memcpy_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_utf8_conv_wc
</UL>

<P><STRONG><a name="[1e3]"></a>lv_txt_get_next_word</STRONG> (Thumb, 326 bytes, Stack size 72 bytes, lv_txt.o(i.lv_txt_get_next_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
</UL>

<P><STRONG><a name="[7]"></a>lv_txt_unicode_to_utf8</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, lv_txt.o(i.lv_txt_unicode_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_txt_unicode_to_utf8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>lv_txt_utf8_conv_wc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_conv_wc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_txt_utf8_conv_wc &rArr; _lv_memcpy_small
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy_small
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>lv_txt_utf8_get_byte_id</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_byte_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_byte_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>lv_txt_utf8_get_char_id</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_char_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_char_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>lv_txt_utf8_get_length</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_txt.o(i.lv_txt_utf8_get_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_txt_utf8_get_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>lv_txt_utf8_next</STRONG> (Thumb, 328 bytes, Stack size 8 bytes, lv_txt.o(i.lv_txt_utf8_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_txt_utf8_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>lv_txt_utf8_prev</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lv_txt.o(i.lv_txt_utf8_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_txt_utf8_prev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>lv_txt_utf8_size</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lv_txt.o(i.lv_txt_utf8_size))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[1f3]"></a>apply_theme</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_theme.o(i.apply_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = apply_theme &rArr;  apply_theme (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>

<P><STRONG><a name="[229]"></a>clear_styles</STRONG> (Thumb, 856 bytes, Stack size 16 bytes, lv_theme.o(i.clear_styles))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = clear_styles &rArr; lv_obj_clean_style_list &rArr; trans_del &rArr; lv_style_remove_prop &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
</UL>

<P><STRONG><a name="[1f4]"></a>arc_init</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, lv_theme_material.o(i.arc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = arc_init &rArr; lv_style_set_line_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_rounded
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[1ff]"></a>bar_init</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, lv_theme_material.o(i.bar_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = bar_init &rArr; lv_style_set_value_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_value_color
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_time
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_6
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[209]"></a>basic_init</STRONG> (Thumb, 4728 bytes, Stack size 32 bytes, lv_theme_material.o(i.basic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = basic_init &rArr; lv_style_set_value_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_value_font
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_value_color
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_time
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_6
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_5
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_delay
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_image_recolor
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_opa
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3ce]"></a>btn_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.btn_init))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3d5]"></a>btnmatrix_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.btnmatrix_init))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[21e]"></a>calendar_init</STRONG> (Thumb, 1814 bytes, Stack size 32 bytes, lv_theme_material.o(i.calendar_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = calendar_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_margin_top
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_margin_bottom
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[224]"></a>chart_init</STRONG> (Thumb, 592 bytes, Stack size 24 bytes, lv_theme_material.o(i.chart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = chart_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[226]"></a>checkbox_init</STRONG> (Thumb, 832 bytes, Stack size 24 bytes, lv_theme_material.o(i.checkbox_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = checkbox_init &rArr; lv_style_set_outline_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_time
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_6
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pattern_opa
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3cd]"></a>cont_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.cont_init))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[22c]"></a>cpicker_init</STRONG> (Thumb, 628 bytes, Stack size 24 bytes, lv_theme_material.o(i.cpicker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = cpicker_init &rArr; lv_style_set_border_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_width
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[22e]"></a>ddlist_init</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, lv_theme_material.o(i.ddlist_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ddlist_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[272]"></a>gauge_init</STRONG> (Thumb, 1228 bytes, Stack size 32 bytes, lv_theme_material.o(i.gauge_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = gauge_init &rArr; lv_style_set_scale_grad_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_width
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_grad_color
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_end_line_width
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_end_color
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3d0]"></a>img_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.img_init))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[287]"></a>keyboard_init</STRONG> (Thumb, 490 bytes, Stack size 16 bytes, lv_theme_material.o(i.keyboard_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = keyboard_init &rArr; lv_style_set_border_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3cf]"></a>label_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.label_init))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[288]"></a>led_init</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, lv_theme_material.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = led_init &rArr; lv_style_set_shadow_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_lighten
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_opa
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3d1]"></a>line_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.line_init))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[28f]"></a>linemeter_init</STRONG> (Thumb, 554 bytes, Stack size 16 bytes, lv_theme_material.o(i.linemeter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = linemeter_init &rArr; lv_style_set_scale_grad_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_width
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_grad_color
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_end_line_width
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_scale_end_color
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[290]"></a>list_init</STRONG> (Thumb, 1898 bytes, Stack size 16 bytes, lv_theme_material.o(i.list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = list_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_time
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_6
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition_prop_5
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_width
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_image_recolor
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[1f9]"></a>lv_color_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_color_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_color_hex &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[208]"></a>lv_color_hex3</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_color_hex3))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_color_hex3 &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[2b2]"></a>lv_color_make</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, lv_theme_material.o(i.lv_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>

<P><STRONG><a name="[214]"></a>lv_color_mix</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, lv_theme_material.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[201]"></a>lv_style_set_bg_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_style_set_bg_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[200]"></a>lv_style_set_bg_opa</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_bg_opa &rArr; _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[20c]"></a>lv_style_set_border_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_border_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_style_set_border_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[215]"></a>lv_style_set_border_opa</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_border_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_border_opa &rArr; _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[221]"></a>lv_style_set_border_side</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_border_side &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
</UL>

<P><STRONG><a name="[20d]"></a>lv_style_set_border_width</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_border_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[230]"></a>lv_style_set_clip_corner</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_clip_corner &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
</UL>

<P><STRONG><a name="[20e]"></a>lv_style_set_image_recolor</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_image_recolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_style_set_image_recolor &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[1f5]"></a>lv_style_set_line_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_line_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_style_set_line_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[1f8]"></a>lv_style_set_line_rounded</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_line_rounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_line_rounded &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[1f7]"></a>lv_style_set_line_width</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_line_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[220]"></a>lv_style_set_margin_bottom</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_margin_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_margin_bottom &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
</UL>

<P><STRONG><a name="[21f]"></a>lv_style_set_margin_top</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_margin_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_margin_top &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
</UL>

<P><STRONG><a name="[203]"></a>lv_style_set_outline_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_outline_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_style_set_outline_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[204]"></a>lv_style_set_outline_opa</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_outline_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_outline_opa &rArr; _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[227]"></a>lv_style_set_outline_pad</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_outline_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_outline_pad &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
</UL>

<P><STRONG><a name="[205]"></a>lv_style_set_outline_width</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_outline_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_outline_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[1fc]"></a>lv_style_set_pad_bottom</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_pad_bottom &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[210]"></a>lv_style_set_pad_inner</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_pad_inner))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_pad_inner &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[1fd]"></a>lv_style_set_pad_left</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_pad_left &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[1fe]"></a>lv_style_set_pad_right</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_pad_right &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[1fb]"></a>lv_style_set_pad_top</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_pad_top &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;table_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[228]"></a>lv_style_set_pattern_opa</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_pattern_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_pattern_opa &rArr; _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
</UL>

<P><STRONG><a name="[1fa]"></a>lv_style_set_radius</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_radius &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_init
</UL>

<P><STRONG><a name="[274]"></a>lv_style_set_scale_end_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_scale_end_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_style_set_scale_end_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
</UL>

<P><STRONG><a name="[275]"></a>lv_style_set_scale_end_line_width</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_scale_end_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_scale_end_line_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
</UL>

<P><STRONG><a name="[273]"></a>lv_style_set_scale_grad_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_scale_grad_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_style_set_scale_grad_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
</UL>

<P><STRONG><a name="[22d]"></a>lv_style_set_scale_width</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_scale_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_scale_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linemeter_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpicker_init
</UL>

<P><STRONG><a name="[28b]"></a>lv_style_set_shadow_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_shadow_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_style_set_shadow_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[28a]"></a>lv_style_set_shadow_width</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_shadow_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msgbox_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[225]"></a>lv_style_set_size</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_size &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gauge_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
</UL>

<P><STRONG><a name="[20a]"></a>lv_style_set_text_color</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;textarea_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_win_shared_init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spinbox_init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chart_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calendar_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[22f]"></a>lv_style_set_text_line_space</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_text_line_space &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;roller_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddlist_init
</UL>

<P><STRONG><a name="[291]"></a>lv_style_set_transform_width</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_transform_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>

<P><STRONG><a name="[216]"></a>lv_style_set_transition_delay</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_transition_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_transition_delay &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[213]"></a>lv_style_set_transition_prop_5</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_transition_prop_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_transition_prop_5 &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[207]"></a>lv_style_set_transition_prop_6</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_transition_prop_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_transition_prop_6 &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[206]"></a>lv_style_set_transition_time</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_transition_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_transition_time &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkbox_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[202]"></a>lv_style_set_value_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lv_theme_material.o(i.lv_style_set_value_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_style_set_value_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slider_init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_init
</UL>

<P><STRONG><a name="[20b]"></a>lv_style_set_value_font</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_theme_material.o(i.lv_style_set_value_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_value_font &rArr; _lv_style_set_ptr &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;basic_init
</UL>

<P><STRONG><a name="[3d6]"></a>msgbox_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lv_theme_material.o(i.msgbox_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = msgbox_init &rArr; lv_style_set_shadow_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3d7]"></a>page_init</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, lv_theme_material.o(i.page_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = page_init &rArr; lv_style_set_bg_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3da]"></a>roller_init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, lv_theme_material.o(i.roller_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = roller_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3d2]"></a>slider_init</STRONG> (Thumb, 682 bytes, Stack size 32 bytes, lv_theme_material.o(i.slider_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = slider_init &rArr; lv_style_set_value_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_value_color
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_margin_top
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_margin_bottom
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3d9]"></a>spinbox_init</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, lv_theme_material.o(i.spinbox_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = spinbox_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3d4]"></a>spinner_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.spinner_init))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3d3]"></a>switch_init</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, lv_theme_material.o(i.switch_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = switch_init &rArr; lv_style_set_bg_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3dd]"></a>table_init</STRONG> (Thumb, 582 bytes, Stack size 16 bytes, lv_theme_material.o(i.table_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = table_init &rArr; lv_style_set_border_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3db]"></a>tabview_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.tabview_init))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3df]"></a>tabview_win_shared_init</STRONG> (Thumb, 1376 bytes, Stack size 16 bytes, lv_theme_material.o(i.tabview_win_shared_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = tabview_win_shared_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_size
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_inner
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_image_recolor
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3d8]"></a>textarea_init</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, lv_theme_material.o(i.textarea_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = textarea_init &rArr; lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex3
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[83]"></a>theme_apply</STRONG> (Thumb, 2186 bytes, Stack size 24 bytes, lv_theme_material.o(i.theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = theme_apply &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_material.o(i.lv_theme_material_init)
</UL>
<P><STRONG><a name="[3dc]"></a>tileview_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.tileview_init))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[3de]"></a>win_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_theme_material.o(i.win_init))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[242]"></a>draw_bg</STRONG> (Thumb, 62 bytes, Stack size 96 bytes, lv_bar.o(i.draw_bg))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = draw_bg &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
</UL>

<P><STRONG><a name="[24a]"></a>draw_indic</STRONG> (Thumb, 1344 bytes, Stack size 296 bytes, lv_bar.o(i.draw_indic))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = draw_indic &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_base_dir
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
</UL>

<P><STRONG><a name="[253]"></a>lv_area_copy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, lv_bar.o(i.lv_area_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[63]"></a>lv_area_get_height</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_bar.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(i.draw_indic)
</UL>
<P><STRONG><a name="[62]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_bar.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(i.draw_indic)
</UL>
<P><STRONG><a name="[6b]"></a>lv_bar_anim</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_bar.o(i.lv_bar_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_bar_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(i.lv_bar_set_value_with_anim)
</UL>
<P><STRONG><a name="[6c]"></a>lv_bar_anim_ready</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_bar.o(i.lv_bar_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_bar_anim_ready &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(i.lv_bar_set_value_with_anim)
</UL>
<P><STRONG><a name="[6a]"></a>lv_bar_design</STRONG> (Thumb, 170 bytes, Stack size 104 bytes, lv_bar.o(i.lv_bar_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = lv_bar_design &rArr; draw_indic &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(i.lv_bar_create)
</UL>
<P><STRONG><a name="[2aa]"></a>lv_bar_get_style</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lv_bar.o(i.lv_bar_get_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lv_bar_get_style &rArr; lv_obj_get_ext_attr &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_log_error
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_debug_check_null
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_signal
</UL>

<P><STRONG><a name="[2a1]"></a>lv_bar_init_anim</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_bar.o(i.lv_bar_init_anim))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>

<P><STRONG><a name="[2ae]"></a>lv_bar_set_value_with_anim</STRONG> (Thumb, 134 bytes, Stack size 96 bytes, lv_bar.o(i.lv_bar_set_value_with_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
</UL>

<P><STRONG><a name="[69]"></a>lv_bar_signal</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, lv_bar.o(i.lv_bar_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = lv_bar_signal &rArr; lv_obj_get_draw_rect_ext_pad_size &rArr; lv_obj_get_style_value_ofs_y &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_handle_get_type_signal
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(i.lv_bar_create)
</UL>
<P><STRONG><a name="[244]"></a>lv_obj_get_style_border_post</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_bar.o(i.lv_obj_get_style_border_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_border_post &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[252]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_bar.o(i.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_signal
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[24f]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_bar.o(i.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_pad_left &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_signal
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[250]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_bar.o(i.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_pad_right &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_signal
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[251]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_bar.o(i.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_pad_top &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_signal
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[2ca]"></a>lv_area_copy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, lv_cont.o(i.lv_area_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>

<P><STRONG><a name="[2d1]"></a>lv_cont_get_style</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_cont.o(i.lv_cont_get_style))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
</UL>

<P><STRONG><a name="[2b5]"></a>lv_cont_layout_center</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, lv_cont.o(i.lv_cont_layout_center))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = lv_cont_layout_center &rArr; lv_obj_align &rArr; obj_align_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_protect
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_protect
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>

<P><STRONG><a name="[2bb]"></a>lv_cont_layout_col</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, lv_cont.o(i.lv_cont_layout_col))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = lv_cont_layout_col &rArr; lv_obj_align &rArr; obj_align_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_protect
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_protect
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_layout
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_inner
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>

<P><STRONG><a name="[2c2]"></a>lv_cont_layout_grid</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, lv_cont.o(i.lv_cont_layout_grid))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lv_cont_layout_grid &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width_fit
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_protect
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_protect
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>

<P><STRONG><a name="[2c5]"></a>lv_cont_layout_pretty</STRONG> (Thumb, 774 bytes, Stack size 96 bytes, lv_cont.o(i.lv_cont_layout_pretty))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = lv_cont_layout_pretty &rArr; lv_obj_align &rArr; obj_align_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_base_dir
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_protect
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_protect
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_layout
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_inner
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>

<P><STRONG><a name="[2c7]"></a>lv_cont_layout_row</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, lv_cont.o(i.lv_cont_layout_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = lv_cont_layout_row &rArr; lv_obj_align &rArr; obj_align_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_base_dir
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_protect
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_protect
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_layout
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_inner
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>

<P><STRONG><a name="[2c9]"></a>lv_cont_refr_autofit</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, lv_cont.o(i.lv_cont_refr_autofit))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = lv_cont_refr_autofit &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_auto_realign
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_top
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_right
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_left
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_margin_bottom
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
</UL>

<P><STRONG><a name="[2cd]"></a>lv_cont_refr_layout</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lv_cont.o(i.lv_cont_refr_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = lv_cont_refr_layout &rArr; lv_cont_layout_pretty &rArr; lv_obj_align &rArr; obj_align_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_layout
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
</UL>

<P><STRONG><a name="[6d]"></a>lv_cont_signal</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, lv_cont.o(i.lv_cont_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = lv_cont_signal &rArr; lv_cont_refr_layout &rArr; lv_cont_layout_pretty &rArr; lv_obj_align &rArr; obj_align_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_handle_get_type_signal
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_get_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_cont.o(i.lv_cont_create)
</UL>
<P><STRONG><a name="[2c0]"></a>lv_obj_get_style_margin_bottom</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_cont.o(i.lv_obj_get_style_margin_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_margin_bottom &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
</UL>

<P><STRONG><a name="[2c1]"></a>lv_obj_get_style_margin_left</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_cont.o(i.lv_obj_get_style_margin_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_margin_left &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
</UL>

<P><STRONG><a name="[2c6]"></a>lv_obj_get_style_margin_right</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_cont.o(i.lv_obj_get_style_margin_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_margin_right &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
</UL>

<P><STRONG><a name="[2bf]"></a>lv_obj_get_style_margin_top</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_cont.o(i.lv_obj_get_style_margin_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_margin_top &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
</UL>

<P><STRONG><a name="[2c8]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_cont.o(i.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
</UL>

<P><STRONG><a name="[2b6]"></a>lv_obj_get_style_pad_inner</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_cont.o(i.lv_obj_get_style_pad_inner))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_pad_inner &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_center
</UL>

<P><STRONG><a name="[2bc]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_cont.o(i.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_pad_left &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
</UL>

<P><STRONG><a name="[2bd]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_cont.o(i.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_pad_right &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
</UL>

<P><STRONG><a name="[2be]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_cont.o(i.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_pad_top &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_row
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_pretty
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_grid
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_layout_col
</UL>

<P><STRONG><a name="[76]"></a>lv_img_design</STRONG> (Thumb, 1604 bytes, Stack size 200 bytes, lv_img.o(i.lv_img_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656<LI>Call Chain = lv_img_design &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(i.lv_img_create)
</UL>
<P><STRONG><a name="[31d]"></a>lv_img_get_style</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_img.o(i.lv_img_get_style))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
</UL>

<P><STRONG><a name="[75]"></a>lv_img_signal</STRONG> (Thumb, 784 bytes, Stack size 80 bytes, lv_img.o(i.lv_img_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = lv_img_signal &rArr; lv_img_set_src &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_point_on_coords
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_handle_get_type_signal
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(i.lv_img_create)
</UL>
<P><STRONG><a name="[30d]"></a>lv_obj_get_style_border_post</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_img.o(i.lv_obj_get_style_border_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_border_post &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[30a]"></a>lv_obj_get_style_clip_corner</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_img.o(i.lv_obj_get_style_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_clip_corner &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[311]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_img.o(i.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[30e]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_img.o(i.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_pad_left &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[30f]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_img.o(i.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_pad_right &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[310]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_img.o(i.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_pad_top &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[30b]"></a>lv_obj_get_style_transform_angle</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_img.o(i.lv_obj_get_style_transform_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_transform_angle &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[30c]"></a>lv_obj_get_style_transform_zoom</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_img.o(i.lv_obj_get_style_transform_zoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_transform_zoom &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[27c]"></a>get_txt_coords</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, lv_label.o(i.get_txt_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = get_txt_coords &rArr; lv_obj_get_style_pad_top &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[33f]"></a>lv_anim_set_exec_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(i.lv_anim_set_exec_cb))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[342]"></a>lv_anim_set_playback_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(i.lv_anim_set_playback_time))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[33d]"></a>lv_anim_set_repeat_count</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(i.lv_anim_set_repeat_count))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[341]"></a>lv_anim_set_time</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(i.lv_anim_set_time))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[33e]"></a>lv_anim_set_values</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(i.lv_anim_set_values))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[33c]"></a>lv_anim_set_var</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(i.lv_anim_set_var))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[333]"></a>lv_area_get_height</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_label.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[332]"></a>lv_area_get_width</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_label.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[334]"></a>lv_font_get_line_height</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(i.lv_font_get_line_height))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[77]"></a>lv_label_design</STRONG> (Thumb, 634 bytes, Stack size 216 bytes, lv_label.o(i.lv_label_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = lv_label_design &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr; draw_border &rArr; draw_full_border &rArr; _lv_mem_buf_get &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_align
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_sel_start
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_sel_end
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_line_height
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(i.lv_label_create)
</UL>
<P><STRONG><a name="[335]"></a>lv_label_dot_tmp_free</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_dot_tmp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_label_dot_tmp_free &rArr; lv_obj_get_ext_attr &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
</UL>

<P><STRONG><a name="[336]"></a>lv_label_get_dot_tmp</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_get_dot_tmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_label_get_dot_tmp &rArr; lv_obj_get_ext_attr &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
</UL>

<P><STRONG><a name="[344]"></a>lv_label_revert_dots</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, lv_label.o(i.lv_label_revert_dots))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lv_label_revert_dots &rArr; lv_label_get_dot_tmp &rArr; lv_obj_get_ext_attr &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_dot_tmp
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
</UL>

<P><STRONG><a name="[32f]"></a>lv_label_set_dot_tmp</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lv_label.o(i.lv_label_set_dot_tmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lv_label_set_dot_tmp &rArr; lv_label_dot_tmp_free &rArr; lv_obj_get_ext_attr &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[79]"></a>lv_label_set_offset_x</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_offset_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_label_set_offset_x &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(i.lv_label_refr_text)
<LI> lv_label.o(i.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[7a]"></a>lv_label_set_offset_y</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_offset_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_label_set_offset_y &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(i.lv_label_refr_text)
<LI> lv_label.o(i.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[78]"></a>lv_label_signal</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, lv_label.o(i.lv_label_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = lv_label_signal &rArr; lv_label_refr_text &rArr; lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_handle_get_type_signal
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_style
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(i.lv_label_create)
</UL>
<P><STRONG><a name="[281]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_label.o(i.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
</UL>

<P><STRONG><a name="[27e]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_label.o(i.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_pad_left &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
</UL>

<P><STRONG><a name="[27f]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_label.o(i.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_pad_right &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
</UL>

<P><STRONG><a name="[280]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lv_label.o(i.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_pad_top &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
</UL>

<P><STRONG><a name="[338]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_label.o(i.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_obj_get_style_text_font &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[33a]"></a>lv_obj_get_style_text_letter_space</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_label.o(i.lv_obj_get_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_text_letter_space &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[339]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_label.o(i.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; _lv_obj_get_style_int &rArr; update_style_cache &rArr; lv_obj_get_style_value_str &rArr; _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[426]"></a>lv_color_make</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, setup_scr_screen.o(i.lv_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
</UL>

<P><STRONG><a name="[3ae]"></a>lv_style_set_bg_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, setup_scr_screen.o(i.lv_style_set_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_style_set_bg_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
</UL>

<P><STRONG><a name="[3b0]"></a>lv_style_set_bg_grad_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, setup_scr_screen.o(i.lv_style_set_bg_grad_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_style_set_bg_grad_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
</UL>

<P><STRONG><a name="[3b2]"></a>lv_style_set_bg_grad_dir</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, setup_scr_screen.o(i.lv_style_set_bg_grad_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_bg_grad_dir &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
</UL>

<P><STRONG><a name="[3b4]"></a>lv_style_set_bg_opa</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, setup_scr_screen.o(i.lv_style_set_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_bg_opa &rArr; _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
</UL>

<P><STRONG><a name="[3bc]"></a>lv_style_set_pad_bottom</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, setup_scr_screen.o(i.lv_style_set_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_pad_bottom &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
</UL>

<P><STRONG><a name="[3be]"></a>lv_style_set_pad_left</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, setup_scr_screen.o(i.lv_style_set_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_pad_left &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
</UL>

<P><STRONG><a name="[3c0]"></a>lv_style_set_pad_right</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, setup_scr_screen.o(i.lv_style_set_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_pad_right &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
</UL>

<P><STRONG><a name="[3c2]"></a>lv_style_set_pad_top</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, setup_scr_screen.o(i.lv_style_set_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_pad_top &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
</UL>

<P><STRONG><a name="[3c4]"></a>lv_style_set_radius</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, setup_scr_screen.o(i.lv_style_set_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_radius &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen
</UL>

<P><STRONG><a name="[428]"></a>lv_color_make</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, setup_scr_screen_1.o(i.lv_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[2ce]"></a>lv_cont_set_fit</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, setup_scr_screen_1.o(i.lv_cont_set_fit))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lv_cont_set_fit &rArr; lv_cont_set_fit4 &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen &rArr; lv_obj_get_parent &rArr; lv_debug_log_error &rArr; _lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_set_fit4
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[3af]"></a>lv_style_set_bg_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, setup_scr_screen_1.o(i.lv_style_set_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_style_set_bg_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[3b1]"></a>lv_style_set_bg_grad_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, setup_scr_screen_1.o(i.lv_style_set_bg_grad_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_style_set_bg_grad_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[3b3]"></a>lv_style_set_bg_grad_dir</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, setup_scr_screen_1.o(i.lv_style_set_bg_grad_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_bg_grad_dir &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[3b5]"></a>lv_style_set_bg_opa</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, setup_scr_screen_1.o(i.lv_style_set_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_bg_opa &rArr; _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[3b6]"></a>lv_style_set_border_color</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, setup_scr_screen_1.o(i.lv_style_set_border_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_style_set_border_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[3b7]"></a>lv_style_set_border_opa</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, setup_scr_screen_1.o(i.lv_style_set_border_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_border_opa &rArr; _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[3b8]"></a>lv_style_set_border_width</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, setup_scr_screen_1.o(i.lv_style_set_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_border_width &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[3b9]"></a>lv_style_set_image_opa</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, setup_scr_screen_1.o(i.lv_style_set_image_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_image_opa &rArr; _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[3ba]"></a>lv_style_set_image_recolor</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, setup_scr_screen_1.o(i.lv_style_set_image_recolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_style_set_image_recolor &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[3bb]"></a>lv_style_set_image_recolor_opa</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, setup_scr_screen_1.o(i.lv_style_set_image_recolor_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_image_recolor_opa &rArr; _lv_style_set_opa &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[3bd]"></a>lv_style_set_pad_bottom</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, setup_scr_screen_1.o(i.lv_style_set_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_pad_bottom &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[3bf]"></a>lv_style_set_pad_left</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, setup_scr_screen_1.o(i.lv_style_set_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_pad_left &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[3c1]"></a>lv_style_set_pad_right</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, setup_scr_screen_1.o(i.lv_style_set_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_pad_right &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[3c3]"></a>lv_style_set_pad_top</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, setup_scr_screen_1.o(i.lv_style_set_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_pad_top &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[3c5]"></a>lv_style_set_radius</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, setup_scr_screen_1.o(i.lv_style_set_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_radius &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[3c6]"></a>lv_style_set_text_color</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, setup_scr_screen_1.o(i.lv_style_set_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_style_set_text_color &rArr; _lv_style_set_color &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[3c7]"></a>lv_style_set_text_font</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, setup_scr_screen_1.o(i.lv_style_set_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_text_font &rArr; _lv_style_set_ptr &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[3c8]"></a>lv_style_set_text_letter_space</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, setup_scr_screen_1.o(i.lv_style_set_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_style_set_text_letter_space &rArr; _lv_style_set_int &rArr; style_resize &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; ent_alloc &rArr; ent_trunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[168]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[163]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1ef]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ee]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[165]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[ac]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[b0]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
